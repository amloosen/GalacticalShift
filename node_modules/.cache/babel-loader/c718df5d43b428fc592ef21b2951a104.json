{"ast":null,"code":"var _jsxFileName = \"/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport Cockpit from \"./img/CockpitBlank.jpg\"; /////////////////////////////////////////////////////////////////////////////////\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar trialTotal = 9; /////////////////////////////////////////////////////////////////////////////////\n// Plan the outcome memory test here\n/////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n// REACT COMPONENT START\n\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n    const userID = this.props.location.state.userID;\n    const date = this.props.location.state.date;\n    const startTime = this.props.location.state.startTime;\n    var currentDate = new Date(); // maybe change to local\n\n    var timeString = currentDate.toTimeString(); /////////////////////////////////////////////////////////////////////////////////\n    // SET COMPONENT STATES\n\n    this.state = {\n      userID: userID,\n      date: date,\n      startTime: startTime,\n      sectionTime: timeString,\n      taskSessionTry: 1,\n      taskSession: \"TrainingTask\",\n      level: 1,\n      //adapt later\n      trialNum: 1,\n      //adapt\n      trialTotal: trialTotal,\n      //adapt\n      trialSliderRT: 0,\n      trialMu: 0,\n      trialSgm: 0,\n      trialTime: 0,\n      trialScore: 0,\n      valElem1: 0,\n      valElem2: 0,\n      valElem3: 0,\n      colElem1: 0,\n      colElem2: 0,\n      colElem3: 0 // instructScreen: true,\n      // testScreen: false,\n      //\n      // debug: false, //if true, skip this section\n\n    }; // this.handleInstructLocal = this.handleInstructLocal.bind(this);\n    // this.testStart = this.testStart.bind(this);\n\n    /* prevents page from going down when space bar is hit .*/\n\n    window.addEventListener(\"keydown\", function (e) {\n      if (e.keyCode === 32 && e.target === document.body) {\n        e.preventDefault();\n      }\n    });\n  } /////////////////////////////////////////////////////////////////////////////////\n  // END COMPONENT STATE\n  // This handles instruction screen within the component USING KEYBOARD\n  // handleInstructLocal(key_pressed) {\n  //   var curText = this.state.instructScreenText;\n  //   var whichButton = key_pressed;\n  //\n  //   if (whichButton === 4 && curText > 1) {\n  //     this.setState({ instructScreenText: curText - 1 });\n  //   } else if (whichButton === 5 && curText < 6) {\n  //     this.setState({ instructScreenText: curText + 1 });\n  //   } else if (curText === 6 && whichButton === 10) {\n  //     //startmissionOne\n  //     setTimeout(\n  //       function () {\n  //         this.missionOne();\n  //       }.bind(this),\n  //       0\n  //     );\n  //   } else if (curText === 7 && whichButton === 10) {\n  //     //restart\n  //     this.setState({\n  //       instructScreenText: 1,\n  //     });\n  //   } else if (curText === 8 && whichButton === 10) {\n  //     //go to pathtask\n  //     setTimeout(\n  //       function () {\n  //         this.nextMission();\n  //       }.bind(this),\n  //       0\n  //     );\n  //   }\n  // }\n  //\n  // // handle key key_pressed\n  // _handleInstructKey = (event) => {\n  //   var key_pressed;\n  //\n  //   switch (event.keyCode) {\n  //     case 37:\n  //     //    this is left arrow\n  //     key_pressed = 4;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     case 39:\n  //     //    this is right arrow\n  //     key_pressed = 5;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     case 32:\n  //     //    this is SPACEBAR\n  //     key_pressed = 10;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     default:\n  //   }\n  // };\n  // _handleTestKey = (event) => {\n  //   var pressed;\n  //   var time_pressed;\n  //\n  //   switch (event.keyCode) {\n  //     case 49:\n  //     pressed = 1;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 50:\n  //     pressed = 2;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 51:\n  //     pressed = 3;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     //this is keycode for numpad\n  //     case 97:\n  //     pressed = 1;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 98:\n  //     pressed = 2;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 99:\n  //     pressed = 3;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     default:\n  //   }\n  // };\n  /////////////////////////////////////////////////////////////////////////////////\n  // END COMPONENT PROPS\n  // missionOne() {\n  //   var trialTime = Math.round(performance.now());\n  //   this.setState({\n  //     instructScreen: false,\n  //     testScreen: true,\n  //     trialNum: 1,\n  //     trialTime: trialTime,\n  //     trialSliderRT: 0,\n  //     trialKeypress: 0,\n  //     trialCorLog: [],\n  //     trialScore: 0,\n  //   });\n  // }\n\n\n  render() {\n    // testStart(trialNum) {\n    let text = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questions,\n      children: [\"How large is the alien population?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this); // return <div>{text}</div>;\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cockpit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        onSpacebarHit: result => window.alert(JSON.stringify(result))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this);\n  }\n\n  trialSave() {\n    var userID = this.state.userID;\n    var currentDate = new Date(); // maybe change to local\n\n    var sectionTime = currentDate.toTimeString();\n    var trialTime = Math.round(performance.now());\n    let saveString = {\n      userID: this.state.userID,\n      date: this.state.date,\n      startTime: this.state.startTime,\n      // this is when they start the expt\n      sectionTime: sectionTime,\n      //this is if they somehow refresh the page...\n      trialTime: trialTime,\n      taskSession: this.state.taskSession,\n      structNum: null,\n      level: this.state.level,\n      trialNum: this.state.trialNum,\n      trialTotal: this.state.trialTotal,\n      trialSliderRT: this.state.trialSliderRT,\n      trialMu: this.state.trialMu,\n      trialSgm: this.state.trialSgm,\n      trialTime: this.state.trialTime,\n      trialScore: this.state.trialScore,\n      valElem1: this.state.valElem1,\n      valElem2: this.state.valElem2,\n      valElem3: this.state.valElem3,\n      colElem1: this.state.colElem1,\n      colElem2: this.state.colElem2,\n      colElem3: this.state.colElem3 // outcomeVal: this.state.outcomeVal,\n      // outcomeIndx: this.state.outcomeIndx,\n      // stateWord: null,\n      // stateIndx: null,\n\n    };\n    console.log(saveString);\n\n    try {\n      fetch(`${DATABASE_URL}/trainingTrial_data/` + userID, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(saveString)\n      });\n    } catch (e) {\n      console.log(\"Cant post?\");\n    }\n  }\n\n  trialNext() {\n    var trialNum = this.state.trialNum + 1;\n    var trialTime = Math.round(performance.now());\n    this.setState({\n      trialTime: trialTime,\n      trialNum: trialNum,\n      trialKeypress: 0,\n      // trialPicIndx: null,\n      // trialPicNum: null,\n      // trialPicValue: null,\n      // trialPicAns: null,\n      trialCor: null\n    });\n  } // passMission() {\n  //   this.setState({\n  //     instructScreen: true,\n  //     testScreen: false,\n  //     instructScreenText: 8,\n  //   });\n  // }\n  // nextMission() {\n  //   document.removeEventListener(\"keyup\", this._handleInstructKey);\n  //   document.removeEventListener(\"keyup\", this._handleDebugKey);\n  //   this.props.history.push({\n  //     pathname: `/PathTask`,\n  //     state: {\n  //       userID: this.state.userID,\n  //       date: this.state.date,\n  //       startTime: this.state.startTime,\n  //\n  //     },\n  //   });\n  // }\n\n\n  componentDidMount() {\n    window.scrollTo(0, 0); //send the TrainingTask conditions?\n\n    setTimeout(function () {\n      this.trialSave();\n    }.bind(this), 0);\n    setTimeout(function () {\n      this.setState({\n        mounted: 1\n      });\n    }.bind(this), 5000);\n  }\n\n  componentWillUnmount() {\n    // fix Warning: Can't perform a React state update on an unmounted component\n    this.setState = (state, callback) => {\n      return;\n    };\n  } //////////////////////////////////////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////////////\n  // render time\n  // render() {\n  // let text;\n  //\n  // if (this.state.debug === false) {\n  //   if (this.state.instructScreen === true) {\n  //     if (this.state.instructScreenText === 1) {\n  //       document.addEventListener(\"keyup\", this._handleInstructKey);\n  //       text = (\n  //         <div className={styles.main}>\n  //         <p>\n  //         <span className={styles.center}>\n  //         Hello and welcome on onboard!\n  //         </span>\n  //         <br />\n  //         For today&apos;s mission, you will be a space explorer on an intergalactic mission.\n  //         <br />\n  //         Your mission is to tell your station on earth of how many aliens live on the planets you visit.\n  //         <br /> <br />It is critical that you give your best estimate of the alien population size for the mission to be successful.\n  //         <br /> <br />\n  //         We will now tell you how you can infer the population size once you reached a planet.\n  //         <br /> <br />\n  //         <span className={styles.centerTwo}>\n  //         <i>(Use the ← → keys to navigate the pages.)</i>\n  //         </span>\n  //         <span className={styles.centerTwo}>\n  //         [<strong>NEXT →</strong>]\n  //         </span>\n  //         </p>\n  //         </div>\n  //       );\n  //     } else if (this.state.instructScreenText === 2) {\n  //       text = (\n  //         <div className={styles.main}>\n  //         <p>\n  //         <span className={styles.center}>\n  //         TRAINING I\n  //         </span>\n  //         <br />\n  //         So how can you find out how many aliens live on a planet?\n  //         <br />\n  //         <br />\n  //         Your spaceship is equipped with several measuring instruments\n  //         <br />\n  //         that will help you determine how many aliens live on the planet.\n  //         <br /><br />A measuring instrument may look like this:\n  //         <br /> <br />\n  //         <span className={styles.centerTwo}>\n  //         <img\n  //         className={styles.state}\n  //         src={this.state.introPic[0]}\n  //         alt=\"example1\"\n  //         />\n  //         </span>\n  //         <br />\n  //         This instrument indicates 40% of the resource is available.\n  //         <br />\n  //\n  //         <br />\n  //         <span className={styles.centerTwo}>\n  //         [<strong>← BACK</strong>] [<strong>NEXT →</strong>]\n  //         </span>\n  //         </p>\n  //         </div>\n  //       );\n  //     } else if (this.state.instructScreenText === 3) {\n  //       text = (\n  //         <div className={styles.main}>\n  //         <p>\n  //         <span className={styles.center}>TRAINING I</span>\n  //         <br />\n  //         The aliens living on these planets rely on natural resources,\n  //         <br /> and thus the population size is related to the measurement of your instrument.\n  //         <br />\n  //         <br />\n  //         For example, the reading of the measurement could be reflecting the population size (in million) one-to-one.\n  //         <br />\n  //         This would mean that if the instrument shows you ‘40%’ 40 million aliens live on that planet. <br />\n  //         <br />\n  //         <span className={styles.centerTwo}>\n  //         [<strong>← BACK</strong>] [<strong>NEXT →</strong>]\n  //         </span>\n  //         </p>\n  //         </div>\n  //       );\n  //     } else if (this.state.instructScreenText === 4) {\n  //       text = (\n  //         <div className={styles.main}>\n  //         <p>\n  //         <span className={styles.center}>TRAINING I</span>\n  //         <br />\n  //         However, a challenge makes your mission more difficult:\n  //         <br />\n  //         <br />\n  //         No one knows how the instrument readings map onto the population size of the planet.\n  //         <br />\n  //         The association between the instrument reading and the population size will be\n  //         <br /> <strong>more complex</strong> and also <strong>change at certain time points.</strong><br />\n  //         <br />\n  //         It is your task to learn this and keep track of changes.\n  //         <br /> <br />\n  //         <span className={styles.centerTwo}>\n  //         [<strong>← BACK</strong>] [<strong>NEXT →</strong>]\n  //         </span>\n  //         </p>\n  //         </div>\n  //       );\n  //     } else if (this.state.instructScreenText === 5) {\n  //       text = (\n  //         <div className={styles.main}>\n  //         <p>\n  //         <span className={styles.center}>TRAINING I</span>\n  //         <br />\n  //         For simplicity, we will now introduce you to the structure by using simple mappings <br />\n  //         that will change at some point.\n  //         <br /> <br />\n  //         We want to see whether you can detect the change. <br /><br />\n  //         <br /> <br />\n  //         <span className={styles.centerTwo}>\n  //         [<strong>← BACK</strong>] [<strong>NEXT →</strong>]\n  //         </span>\n  //         </p>\n  //         </div>\n  //       );\n  //     } else if (this.state.instructScreenText === 6) {\n  //       text = (\n  //         <div className={styles.main}>\n  //         <p>\n  //         <span className={styles.center}>TRAINING I</span>\n  //         <br />\n  //         For your first training, after you indicated your answer <br />\n  //         we will show you how many aliens actually lived on the planet.\n  //         <br /><br />\n  //         This will make it possible for you to find out how the instrument relates to the alien population size.\n  //         <br /> <br />\n  //         Let's practice this!\n  //         <br /> <br />\n  //         <span className={styles.centerTwo}>\n  //         Press the [<strong>SPACEBAR</strong>] to start the training.\n  //         </span>\n  //         <span className={styles.centerTwo}>\n  //         [<strong>← BACK</strong>]\n  //         </span>\n  //         </p>\n  //         </div>\n  //       );\n  //     } else if (this.state.instructScreenText === 7) {\n  //       // IF YOU FAIL THE TEST, YOU RESTART\n  //       document.addEventListener(\"keyup\", this._handleInstructKey);\n  //       text = (\n  //         <div className={styles.main}>\n  //         <p>\n  //         <span className={styles.center}>TRAINING I</span>\n  //         <br />\n  //         Unforuntately, you only had {this.state.trialScore}/\n  //         {this.state.trialTotal} correct!\n  //         <br /> <br />\n  //         Let us go through the instructions and try again.\n  //         <br /> <br />\n  //         <span className={styles.centerTwo}>\n  //         Press the [<strong>SPACEBAR</strong>] to try again.\n  //         </span>\n  //         </p>\n  //         </div>\n  //       );\n  //     } else if (this.state.instructScreenText === 8) {\n  //       // IF YOU PASS THE TEST\n  //       document.addEventListener(\"keyup\", this._handleInstructKey);\n  //\n  //       text = (\n  //         <div className={styles.main}>\n  //         <p>\n  //         <span className={styles.center}>TRAINING I</span>\n  //         <br />\n  //         Great, you had {this.state.trialScore}/{this.state.trialTotal}\n  //         &nbsp;correct!\n  //         <br /> <br />\n  //         In summary, these outcome rooms lead to:\n  //         <span className={styles.centerTwo}>\n  //         <img\n  //         className={styles.stateSmall}\n  //         src={this.state.outcomePic[0]}\n  //         alt=\"outcome1\"\n  //         />\n  //         &nbsp;&nbsp; = &nbsp;+{\" \"}\n  //         <img\n  //         className={styles.coin}\n  //         src={this.state.img_coinSmall}\n  //         alt=\"coin\"\n  //         />\n  //         &nbsp;&nbsp; (gain)\n  //         <br />\n  //         <img\n  //         className={styles.stateSmall}\n  //         src={this.state.outcomePic[1]}\n  //         alt=\"outcome2\"\n  //         />\n  //         &nbsp;&nbsp; = &nbsp;-{\" \"}\n  //         <img\n  //         className={styles.coin}\n  //         src={this.state.img_coinSmall}\n  //         alt=\"coin\"\n  //         />\n  //         &nbsp;&nbsp; (lose)\n  //         <br />\n  //         <img\n  //         className={styles.stateSmall}\n  //         src={this.state.outcomePic[2]}\n  //         alt=\"outcome3\"\n  //         />\n  //         &nbsp;&nbsp; = &nbsp;none\n  //         </span>\n  //         <br />\n  //         You are ready to move on to the next training session.\n  //         <br /> <br />\n  //         <span className={styles.centerTwo}>\n  //         Press the [<strong>SPACEBAR</strong>] to continue.\n  //         </span>\n  //         </p>\n  //         </div>\n  //       );\n  //     }\n  //   } else if (this.state.instructScreen === false) {\n  //     // out of the instructions, this is the quiz\n  //     if (this.state.testScreen === true) {\n  //       document.removeEventListener(\"keyup\", this._handleInstructKey);\n  //\n  //       if (this.state.trialNum <= this.state.trialTotal) {\n  //         document.addEventListener(\"keyup\", this._handleTestKey);\n  //         text = <div> {this.testStart(this.state.trialNum)}</div>;\n  //       } else {\n  //         // finish the quiz\n  //         document.removeEventListener(\"keyup\", this._handleTestKey);\n  //         if (this.state.trialScore / this.state.trialTotal > 0.65) {\n  //           //if score more than 65%, move on to the next section\n  //           setTimeout(\n  //             function () {\n  //               this.passMission();\n  //             }.bind(this),\n  //             0\n  //           );\n  //         } else {\n  //           //if you fail, then you do the quiz again...\n  //           setTimeout(\n  //             function () {\n  //               this.missionOneRestart();\n  //             }.bind(this),\n  //             0\n  //           );\n  //         }\n  //       }\n  //     } else {\n  //       //Error..........\n  //       console.log(\"ERROR - LOOP BROKEN OR LEAKY\");\n  //     }\n  //   }\n  // } else if (this.state.debug === true) {\n  //   document.addEventListener(\"keyup\", this._handleDebugKey);\n  //   text = (\n  //     <div className={styles.main}>\n  //     <p>\n  //     <span className={styles.center}>DEBUG MODE</span>\n  //     <br />\n  //\n  //     <span className={styles.centerTwo}>\n  //     Press the [<strong>SPACEBAR</strong>] to skip to next section.\n  //     </span>\n  //     </p>\n  //     </div>\n  //   );\n  // }\n  //   return (\n  //     <div className={styles.cockpit}>\n  //     {/* <div className={styles.textblock}>{text}</div> */}\n  //     <div className={styles.textblock}>{this.testStart()}</div>\n  //     </div>\n  //   );\n  // }\n\n\n}\n\nexport default _c = withRouter(TrainingTask);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js"],"names":["React","useState","withRouter","DATABASE_URL","styles","Slider","Cockpit","trialTotal","TrainingTask","Component","constructor","props","userID","location","state","date","startTime","currentDate","Date","timeString","toTimeString","sectionTime","taskSessionTry","taskSession","level","trialNum","trialSliderRT","trialMu","trialSgm","trialTime","trialScore","valElem1","valElem2","valElem3","colElem1","colElem2","colElem3","window","addEventListener","e","keyCode","target","document","body","preventDefault","render","text","questions","cockpit","result","alert","JSON","stringify","trialSave","Math","round","performance","now","saveString","structNum","console","log","fetch","method","headers","Accept","trialNext","setState","trialKeypress","trialCor","componentDidMount","scrollTo","setTimeout","bind","mounted","componentWillUnmount","callback"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAOC,OAAP,MAAoB,wBAApB,C,CACA;;;AAEA,IAAIC,UAAU,GAAG,CAAjB,C,CAEA;AACA;AAEA;AACA;AACA;;AACA,MAAMC,YAAN,SAA2BR,KAAK,CAACS,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,UAAMC,MAAM,GAAG,KAAKD,KAAL,CAAWE,QAAX,CAAoBC,KAApB,CAA0BF,MAAzC;AACA,UAAMG,IAAI,GAAG,KAAKJ,KAAL,CAAWE,QAAX,CAAoBC,KAApB,CAA0BC,IAAvC;AACA,UAAMC,SAAS,GAAG,KAAKL,KAAL,CAAWE,QAAX,CAAoBC,KAApB,CAA0BE,SAA5C;AACA,QAAIC,WAAW,GAAG,IAAIC,IAAJ,EAAlB,CANiB,CAMa;;AAC9B,QAAIC,UAAU,GAAGF,WAAW,CAACG,YAAZ,EAAjB,CAPiB,CASjB;AACA;;AACA,SAAKN,KAAL,GAAa;AACXF,MAAAA,MAAM,EAAEA,MADG;AAEXG,MAAAA,IAAI,EAAEA,IAFK;AAGXC,MAAAA,SAAS,EAAEA,SAHA;AAIXK,MAAAA,WAAW,EAAEF,UAJF;AAKXG,MAAAA,cAAc,EAAE,CALL;AAMXC,MAAAA,WAAW,EAAE,cANF;AAOXC,MAAAA,KAAK,EAAE,CAPI;AAOF;AACTC,MAAAA,QAAQ,EAAE,CARC;AAQC;AACZlB,MAAAA,UAAU,EAAEA,UATD;AASY;AACvBmB,MAAAA,aAAa,EAAE,CAVJ;AAWXC,MAAAA,OAAO,EAAE,CAXE;AAYXC,MAAAA,QAAQ,EAAE,CAZC;AAaXC,MAAAA,SAAS,EAAE,CAbA;AAcXC,MAAAA,UAAU,EAAE,CAdD;AAeXC,MAAAA,QAAQ,EAAE,CAfC;AAgBXC,MAAAA,QAAQ,EAAE,CAhBC;AAiBXC,MAAAA,QAAQ,EAAE,CAjBC;AAkBXC,MAAAA,QAAQ,EAAE,CAlBC;AAmBXC,MAAAA,QAAQ,EAAE,CAnBC;AAoBXC,MAAAA,QAAQ,EAAE,CApBC,CAqBX;AACA;AACA;AACA;;AAxBW,KAAb,CAXiB,CAsCjB;AACA;;AAEA;;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,UAAUC,CAAV,EAAa;AAC9C,UAAIA,CAAC,CAACC,OAAF,KAAc,EAAd,IAAoBD,CAAC,CAACE,MAAF,KAAaC,QAAQ,CAACC,IAA9C,EAAoD;AAClDJ,QAAAA,CAAC,CAACK,cAAF;AACD;AACF,KAJD;AAKD,GAhDwC,CAiDzgBACN;AAAK,MAAA,SAAS,EAAE1C,MAAM,CAAC2C,SAAvB;AAAA,oEAEA;AAAA;AAAA;AAAA;AAAA,cAFA,eAGA;AAAA;AAAA;AAAA;AAAA,cAHA,eAIA;AAAA;AAAA;AAAA;AAAA,cAJA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAJO,CAgBP;;;AACA,wBAAQ;AAAK,MAAA,SAAS,EAAE3C,MAAM,CAAC4C,OAAvB;AAAA,8BACN;AAAA,kBAAMF;AAAN;AAAA;AAAA;AAAA;AAAA,cADM,eAEN,QAAC,MAAD;AAAQ,QAAA,aAAa,EAAGG,MAAD,IAAYZ,MAAM,CAACa,KAAP,CAAaC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAb;AAAnC;AAAA;AAAA;AAAA;AAAA,cAFM;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AAKC;;AAEDI,EAAAA,SAAS,GAAG;AACV,QAAIzC,MAAM,GAAG,KAAKE,KAAL,CAAWF,MAAxB;AACA,QAAIK,WAAW,GAAG,IAAIC,IAAJ,EAAlB,CAFU,CAEoB;;AAC9B,QAAIG,WAAW,GAAGJ,WAAW,CAACG,YAAZ,EAAlB;AACA,QAAIS,SAAS,GAAGyB,IAAI,CAACC,KAAL,CAAWC,WAAW,CAACC,GAAZ,EAAX,CAAhB;AAEA,QAAIC,UAAU,GAAG;AACf9C,MAAAA,MAAM,EAAE,KAAKE,KAAL,CAAWF,MADJ;AAEfG,MAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAFF;AAGfC,MAAAA,SAAS,EAAE,KAAKF,KAAL,CAAWE,SAHP;AAGkB;AACjCK,MAAAA,WAAW,EAAEA,WAJE;AAIW;AAC1BQ,MAAAA,SAAS,EAAEA,SALI;AAMfN,MAAAA,WAAW,EAAE,KAAKT,KAAL,CAAWS,WANT;AAQfoC,MAAAA,SAAS,EAAE,IARI;AAUfnC,MAAAA,KAAK,EAAE,KAAKV,KAAL,CAAWU,KAVH;AAWfC,MAAAA,QAAQ,EAAE,KAAKX,KAAL,CAAWW,QAXN;AAYflB,MAAAA,UAAU,EAAE,KAAKO,KAAL,CAAWP,UAZR;AAafmB,MAAAA,aAAa,EAAE,KAAKZ,KAAL,CAAWY,aAbX;AAcfC,MAAAA,OAAO,EAAE,KAAKb,KAAL,CAAWa,OAdL;AAefC,MAAAA,QAAQ,EAAE,KAAKd,KAAL,CAAWc,QAfN;AAgBfC,MAAAA,SAAS,EAAE,KAAKf,KAAL,CAAWe,SAhBP;AAiBfC,MAAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWgB,UAjBR;AAkBfC,MAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWiB,QAlBN;AAmBfC,MAAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWkB,QAnBN;AAoBfC,MAAAA,QAAQ,EAAE,KAAKnB,KAAL,CAAWmB,QApBN;AAqBfC,MAAAA,QAAQ,EAAE,KAAKpB,KAAL,CAAWoB,QArBN;AAsBfC,MAAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWqB,QAtBN;AAuBfC,MAAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWsB,QAvBN,CAyBf;AACA;AACA;AACA;;AA5Be,KAAjB;AAgCAwB,IAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;;AAEA,QAAI;AACFI,MAAAA,KAAK,CAAE,GAAE3D,YAAa,sBAAhB,GAAwCS,MAAzC,EAAiD;AACpDmD,QAAAA,MAAM,EAAE,MAD4C;AAEpDC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,kBADD;AAEP,0BAAgB;AAFT,SAF2C;AAMpDtB,QAAAA,IAAI,EAAEQ,IAAI,CAACC,SAAL,CAAeM,UAAf;AAN8C,OAAjD,CAAL;AAQD,KATD,CASE,OAAOnB,CAAP,EAAU;AACVqB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD;AACF;;AAGDK,EAAAA,SAAS,GAAG;AACV,QAAIzC,QAAQ,GAAG,KAAKX,KAAL,CAAWW,QAAX,GAAsB,CAArC;AACA,QAAII,SAAS,GAAGyB,IAAI,CAACC,KAAL,CAAWC,WAAW,CAACC,GAAZ,EAAX,CAAhB;AAEA,SAAKU,QAAL,CAAc;AACZtC,MAAAA,SAAS,EAAEA,SADC;AAEZJ,MAAAA,QAAQ,EAAEA,QAFE;AAGZ2C,MAAAA,aAAa,EAAE,CAHH;AAIZ;AACA;AACA;AACA;AACAC,MAAAA,QAAQ,EAAE;AARE,KAAd;AAUD,GAlQsC,CAsQvC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,iBAAiB,GAAG;AAClBjC,IAAAA,MAAM,CAACkC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB,EADkB,CAElB;;AAEAC,IAAAA,UAAU,CACR,YAAY;AACV,WAAKnB,SAAL;AACD,KAFD,CAEEoB,IAFF,CAEO,IAFP,CADQ,EAIR,CAJQ,CAAV;AAOAD,IAAAA,UAAU,CACR,YAAY;AACV,WAAKL,QAAL,CAAc;AACZO,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KAJD,CAIED,IAJF,CAIO,IAJP,CADQ,EAMR,IANQ,CAAV;AAQD;;AAEDE,EAAAA,oBAAoB,GAAG;AACrB;AACA,SAAKR,QAAL,GAAgB,CAACrD,KAAD,EAAQ8D,QAAR,KAAqB;AACnC;AACD,KAFD;AAGD,GAtTsC,CAwTvjlBuC;;AAolBzC,oBAAe1E,UAAU,CAACM,YAAD,CAAzB","sourcesContent":["import React, { useState }  from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\n\nimport Cockpit from \"./img/CockpitBlank.jpg\";\n/////////////////////////////////////////////////////////////////////////////////\n\nvar trialTotal = 9;\n\n/////////////////////////////////////////////////////////////////////////////////\n// Plan the outcome memory test here\n\n/////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n// REACT COMPONENT START\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const userID = this.props.location.state.userID;\n    const date = this.props.location.state.date;\n    const startTime = this.props.location.state.startTime;\n    var currentDate = new Date(); // maybe change to local\n    var timeString = currentDate.toTimeString();\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // SET COMPONENT STATES\n    this.state = {\n      userID: userID,\n      date: date,\n      startTime: startTime,\n      sectionTime: timeString,\n      taskSessionTry: 1,\n      taskSession: \"TrainingTask\",\n      level: 1,//adapt later\n      trialNum: 1,//adapt\n      trialTotal: trialTotal,//adapt\n      trialSliderRT: 0,\n      trialMu: 0,\n      trialSgm: 0,\n      trialTime: 0,\n      trialScore: 0,\n      valElem1: 0,\n      valElem2: 0,\n      valElem3: 0,\n      colElem1: 0,\n      colElem2: 0,\n      colElem3: 0,\n      // instructScreen: true,\n      // testScreen: false,\n      //\n      // debug: false, //if true, skip this section\n    };\n\n    // this.handleInstructLocal = this.handleInstructLocal.bind(this);\n    // this.testStart = this.testStart.bind(this);\n\n    /* prevents page from going down when space bar is hit .*/\n    window.addEventListener(\"keydown\", function (e) {\n      if (e.keyCode === 32 && e.target === document.body) {\n        e.preventDefault();\n      }\n    });\n  }\n  /////////////////////////////////////////////////////////////////////////////////\n  // END COMPONENT STATE\n\n  // This handles instruction screen within the component USING KEYBOARD\n  // handleInstructLocal(key_pressed) {\n  //   var curText = this.state.instructScreenText;\n  //   var whichButton = key_pressed;\n  //\n  //   if (whichButton === 4 && curText > 1) {\n  //     this.setState({ instructScreenText: curText - 1 });\n  //   } else if (whichButton === 5 && curText < 6) {\n  //     this.setState({ instructScreenText: curText + 1 });\n  //   } else if (curText === 6 && whichButton === 10) {\n  //     //startmissionOne\n  //     setTimeout(\n  //       function () {\n  //         this.missionOne();\n  //       }.bind(this),\n  //       0\n  //     );\n  //   } else if (curText === 7 && whichButton === 10) {\n  //     //restart\n  //     this.setState({\n  //       instructScreenText: 1,\n  //     });\n  //   } else if (curText === 8 && whichButton === 10) {\n  //     //go to pathtask\n  //     setTimeout(\n  //       function () {\n  //         this.nextMission();\n  //       }.bind(this),\n  //       0\n  //     );\n  //   }\n  // }\n  //\n  // // handle key key_pressed\n  // _handleInstructKey = (event) => {\n  //   var key_pressed;\n  //\n  //   switch (event.keyCode) {\n  //     case 37:\n  //     //    this is left arrow\n  //     key_pressed = 4;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     case 39:\n  //     //    this is right arrow\n  //     key_pressed = 5;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     case 32:\n  //     //    this is SPACEBAR\n  //     key_pressed = 10;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     default:\n  //   }\n  // };\n\n  // _handleTestKey = (event) => {\n  //   var pressed;\n  //   var time_pressed;\n  //\n  //   switch (event.keyCode) {\n  //     case 49:\n  //     pressed = 1;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 50:\n  //     pressed = 2;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 51:\n  //     pressed = 3;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     //this is keycode for numpad\n  //     case 97:\n  //     pressed = 1;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 98:\n  //     pressed = 2;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 99:\n  //     pressed = 3;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     default:\n  //   }\n  // };\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // END COMPONENT PROPS\n\n  // missionOne() {\n  //   var trialTime = Math.round(performance.now());\n  //   this.setState({\n  //     instructScreen: false,\n  //     testScreen: true,\n  //     trialNum: 1,\n  //     trialTime: trialTime,\n  //     trialSliderRT: 0,\n  //     trialKeypress: 0,\n  //     trialCorLog: [],\n  //     trialScore: 0,\n  //   });\n  // }\n  render() {\n\n    // testStart(trialNum) {\n\n    let text = (\n      <div className={styles.questions}>\n      How large is the alien population?\n      <br />\n      <br />\n      <br />\n      </div>\n\n    );\n\n\n\n    // return <div>{text}</div>;\n    return (<div className={styles.cockpit}>\n      <div>{text}</div>\n      <Slider onSpacebarHit={(result) => window.alert(JSON.stringify(result))} />\n      </div>);\n\n    }\n\n    trialSave() {\n      var userID = this.state.userID;\n      var currentDate = new Date(); // maybe change to local\n      var sectionTime = currentDate.toTimeString();\n      var trialTime = Math.round(performance.now());\n\n      let saveString = {\n        userID: this.state.userID,\n        date: this.state.date,\n        startTime: this.state.startTime, // this is when they start the expt\n        sectionTime: sectionTime, //this is if they somehow refresh the page...\n        trialTime: trialTime,\n        taskSession: this.state.taskSession,\n\n        structNum: null,\n\n        level: this.state.level,\n        trialNum: this.state.trialNum,\n        trialTotal: this.state.trialTotal,\n        trialSliderRT: this.state.trialSliderRT,\n        trialMu: this.state.trialMu,\n        trialSgm: this.state.trialSgm,\n        trialTime: this.state.trialTime,\n        trialScore: this.state.trialScore,\n        valElem1: this.state.valElem1,\n        valElem2: this.state.valElem2,\n        valElem3: this.state.valElem3,\n        colElem1: this.state.colElem1,\n        colElem2: this.state.colElem2,\n        colElem3: this.state.colElem3,\n\n        // outcomeVal: this.state.outcomeVal,\n        // outcomeIndx: this.state.outcomeIndx,\n        // stateWord: null,\n        // stateIndx: null,\n\n      };\n\n      console.log(saveString);\n\n      try {\n        fetch(`${DATABASE_URL}/trainingTrial_data/` + userID, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(saveString),\n        });\n      } catch (e) {\n        console.log(\"Cant post?\");\n      }\n    }\n\n\n    trialNext() {\n      var trialNum = this.state.trialNum + 1;\n      var trialTime = Math.round(performance.now());\n\n      this.setState({\n        trialTime: trialTime,\n        trialNum: trialNum,\n        trialKeypress: 0,\n        // trialPicIndx: null,\n        // trialPicNum: null,\n        // trialPicValue: null,\n        // trialPicAns: null,\n        trialCor: null,\n      });\n    }\n\n\n\n    // passMission() {\n    //   this.setState({\n    //     instructScreen: true,\n    //     testScreen: false,\n    //     instructScreenText: 8,\n    //   });\n    // }\n\n    // nextMission() {\n    //   document.removeEventListener(\"keyup\", this._handleInstructKey);\n    //   document.removeEventListener(\"keyup\", this._handleDebugKey);\n    //   this.props.history.push({\n    //     pathname: `/PathTask`,\n    //     state: {\n    //       userID: this.state.userID,\n    //       date: this.state.date,\n    //       startTime: this.state.startTime,\n    //\n    //     },\n    //   });\n    // }\n\n    componentDidMount() {\n      window.scrollTo(0, 0);\n      //send the TrainingTask conditions?\n\n      setTimeout(\n        function () {\n          this.trialSave();\n        }.bind(this),\n        0\n      );\n\n      setTimeout(\n        function () {\n          this.setState({\n            mounted: 1,\n          });\n        }.bind(this),\n        5000\n      );\n    }\n\n    componentWillUnmount() {\n      // fix Warning: Can't perform a React state update on an unmounted component\n      this.setState = (state, callback) => {\n        return;\n      };\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    // render time\n\n    // render() {\n    // let text;\n    //\n    // if (this.state.debug === false) {\n    //   if (this.state.instructScreen === true) {\n    //     if (this.state.instructScreenText === 1) {\n    //       document.addEventListener(\"keyup\", this._handleInstructKey);\n    //       text = (\n    //         <div className={styles.main}>\n    //         <p>\n    //         <span className={styles.center}>\n    //         Hello and welcome on onboard!\n    //         </span>\n    //         <br />\n    //         For today&apos;s mission, you will be a space explorer on an intergalactic mission.\n    //         <br />\n    //         Your mission is to tell your station on earth of how many aliens live on the planets you visit.\n    //         <br /> <br />It is critical that you give your best estimate of the alien population size for the mission to be successful.\n    //         <br /> <br />\n    //         We will now tell you how you can infer the population size once you reached a planet.\n    //         <br /> <br />\n    //         <span className={styles.centerTwo}>\n    //         <i>(Use the ← → keys to navigate the pages.)</i>\n    //         </span>\n    //         <span className={styles.centerTwo}>\n    //         [<strong>NEXT →</strong>]\n    //         </span>\n    //         </p>\n    //         </div>\n    //       );\n    //     } else if (this.state.instructScreenText === 2) {\n    //       text = (\n    //         <div className={styles.main}>\n    //         <p>\n    //         <span className={styles.center}>\n    //         TRAINING I\n    //         </span>\n    //         <br />\n    //         So how can you find out how many aliens live on a planet?\n    //         <br />\n    //         <br />\n    //         Your spaceship is equipped with several measuring instruments\n    //         <br />\n    //         that will help you determine how many aliens live on the planet.\n    //         <br /><br />A measuring instrument may look like this:\n    //         <br /> <br />\n    //         <span className={styles.centerTwo}>\n    //         <img\n    //         className={styles.state}\n    //         src={this.state.introPic[0]}\n    //         alt=\"example1\"\n    //         />\n    //         </span>\n    //         <br />\n    //         This instrument indicates 40% of the resource is available.\n    //         <br />\n    //\n    //         <br />\n    //         <span className={styles.centerTwo}>\n    //         [<strong>← BACK</strong>] [<strong>NEXT →</strong>]\n    //         </span>\n    //         </p>\n    //         </div>\n    //       );\n    //     } else if (this.state.instructScreenText === 3) {\n    //       text = (\n    //         <div className={styles.main}>\n    //         <p>\n    //         <span className={styles.center}>TRAINING I</span>\n    //         <br />\n    //         The aliens living on these planets rely on natural resources,\n    //         <br /> and thus the population size is related to the measurement of your instrument.\n    //         <br />\n    //         <br />\n    //         For example, the reading of the measurement could be reflecting the population size (in million) one-to-one.\n    //         <br />\n    //         This would mean that if the instrument shows you ‘40%’ 40 million aliens live on that planet. <br />\n    //         <br />\n    //         <span className={styles.centerTwo}>\n    //         [<strong>← BACK</strong>] [<strong>NEXT →</strong>]\n    //         </span>\n    //         </p>\n    //         </div>\n    //       );\n    //     } else if (this.state.instructScreenText === 4) {\n    //       text = (\n    //         <div className={styles.main}>\n    //         <p>\n    //         <span className={styles.center}>TRAINING I</span>\n    //         <br />\n    //         However, a challenge makes your mission more difficult:\n    //         <br />\n    //         <br />\n    //         No one knows how the instrument readings map onto the population size of the planet.\n    //         <br />\n    //         The association between the instrument reading and the population size will be\n    //         <br /> <strong>more complex</strong> and also <strong>change at certain time points.</strong><br />\n    //         <br />\n    //         It is your task to learn this and keep track of changes.\n    //         <br /> <br />\n    //         <span className={styles.centerTwo}>\n    //         [<strong>← BACK</strong>] [<strong>NEXT →</strong>]\n    //         </span>\n    //         </p>\n    //         </div>\n    //       );\n    //     } else if (this.state.instructScreenText === 5) {\n    //       text = (\n    //         <div className={styles.main}>\n    //         <p>\n    //         <span className={styles.center}>TRAINING I</span>\n    //         <br />\n    //         For simplicity, we will now introduce you to the structure by using simple mappings <br />\n    //         that will change at some point.\n    //         <br /> <br />\n    //         We want to see whether you can detect the change. <br /><br />\n    //         <br /> <br />\n    //         <span className={styles.centerTwo}>\n    //         [<strong>← BACK</strong>] [<strong>NEXT →</strong>]\n    //         </span>\n    //         </p>\n    //         </div>\n    //       );\n    //     } else if (this.state.instructScreenText === 6) {\n    //       text = (\n    //         <div className={styles.main}>\n    //         <p>\n    //         <span className={styles.center}>TRAINING I</span>\n    //         <br />\n    //         For your first training, after you indicated your answer <br />\n    //         we will show you how many aliens actually lived on the planet.\n    //         <br /><br />\n    //         This will make it possible for you to find out how the instrument relates to the alien population size.\n    //         <br /> <br />\n    //         Let's practice this!\n    //         <br /> <br />\n    //         <span className={styles.centerTwo}>\n    //         Press the [<strong>SPACEBAR</strong>] to start the training.\n    //         </span>\n    //         <span className={styles.centerTwo}>\n    //         [<strong>← BACK</strong>]\n    //         </span>\n    //         </p>\n    //         </div>\n    //       );\n    //     } else if (this.state.instructScreenText === 7) {\n    //       // IF YOU FAIL THE TEST, YOU RESTART\n    //       document.addEventListener(\"keyup\", this._handleInstructKey);\n    //       text = (\n    //         <div className={styles.main}>\n    //         <p>\n    //         <span className={styles.center}>TRAINING I</span>\n    //         <br />\n    //         Unforuntately, you only had {this.state.trialScore}/\n    //         {this.state.trialTotal} correct!\n    //         <br /> <br />\n    //         Let us go through the instructions and try again.\n    //         <br /> <br />\n    //         <span className={styles.centerTwo}>\n    //         Press the [<strong>SPACEBAR</strong>] to try again.\n    //         </span>\n    //         </p>\n    //         </div>\n    //       );\n    //     } else if (this.state.instructScreenText === 8) {\n    //       // IF YOU PASS THE TEST\n    //       document.addEventListener(\"keyup\", this._handleInstructKey);\n    //\n    //       text = (\n    //         <div className={styles.main}>\n    //         <p>\n    //         <span className={styles.center}>TRAINING I</span>\n    //         <br />\n    //         Great, you had {this.state.trialScore}/{this.state.trialTotal}\n    //         &nbsp;correct!\n    //         <br /> <br />\n    //         In summary, these outcome rooms lead to:\n    //         <span className={styles.centerTwo}>\n    //         <img\n    //         className={styles.stateSmall}\n    //         src={this.state.outcomePic[0]}\n    //         alt=\"outcome1\"\n    //         />\n    //         &nbsp;&nbsp; = &nbsp;+{\" \"}\n    //         <img\n    //         className={styles.coin}\n    //         src={this.state.img_coinSmall}\n    //         alt=\"coin\"\n    //         />\n    //         &nbsp;&nbsp; (gain)\n    //         <br />\n    //         <img\n    //         className={styles.stateSmall}\n    //         src={this.state.outcomePic[1]}\n    //         alt=\"outcome2\"\n    //         />\n    //         &nbsp;&nbsp; = &nbsp;-{\" \"}\n    //         <img\n    //         className={styles.coin}\n    //         src={this.state.img_coinSmall}\n    //         alt=\"coin\"\n    //         />\n    //         &nbsp;&nbsp; (lose)\n    //         <br />\n    //         <img\n    //         className={styles.stateSmall}\n    //         src={this.state.outcomePic[2]}\n    //         alt=\"outcome3\"\n    //         />\n    //         &nbsp;&nbsp; = &nbsp;none\n    //         </span>\n    //         <br />\n    //         You are ready to move on to the next training session.\n    //         <br /> <br />\n    //         <span className={styles.centerTwo}>\n    //         Press the [<strong>SPACEBAR</strong>] to continue.\n    //         </span>\n    //         </p>\n    //         </div>\n    //       );\n    //     }\n    //   } else if (this.state.instructScreen === false) {\n    //     // out of the instructions, this is the quiz\n    //     if (this.state.testScreen === true) {\n    //       document.removeEventListener(\"keyup\", this._handleInstructKey);\n    //\n    //       if (this.state.trialNum <= this.state.trialTotal) {\n    //         document.addEventListener(\"keyup\", this._handleTestKey);\n    //         text = <div> {this.testStart(this.state.trialNum)}</div>;\n    //       } else {\n    //         // finish the quiz\n    //         document.removeEventListener(\"keyup\", this._handleTestKey);\n    //         if (this.state.trialScore / this.state.trialTotal > 0.65) {\n    //           //if score more than 65%, move on to the next section\n    //           setTimeout(\n    //             function () {\n    //               this.passMission();\n    //             }.bind(this),\n    //             0\n    //           );\n    //         } else {\n    //           //if you fail, then you do the quiz again...\n    //           setTimeout(\n    //             function () {\n    //               this.missionOneRestart();\n    //             }.bind(this),\n    //             0\n    //           );\n    //         }\n    //       }\n    //     } else {\n    //       //Error..........\n    //       console.log(\"ERROR - LOOP BROKEN OR LEAKY\");\n    //     }\n    //   }\n    // } else if (this.state.debug === true) {\n    //   document.addEventListener(\"keyup\", this._handleDebugKey);\n    //   text = (\n    //     <div className={styles.main}>\n    //     <p>\n    //     <span className={styles.center}>DEBUG MODE</span>\n    //     <br />\n    //\n    //     <span className={styles.centerTwo}>\n    //     Press the [<strong>SPACEBAR</strong>] to skip to next section.\n    //     </span>\n    //     </p>\n    //     </div>\n    //   );\n    // }\n\n    //   return (\n    //     <div className={styles.cockpit}>\n    //     {/* <div className={styles.textblock}>{text}</div> */}\n    //     <div className={styles.textblock}>{this.testStart()}</div>\n    //     </div>\n    //   );\n    // }\n  }\n\n  export default withRouter(TrainingTask);\n"]},"metadata":{},"sourceType":"module"}