{"ast":null,"code":"var _jsxFileName = \"/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport blue from \"./img/stimuli3_blue.jpg\";\nimport Cockpit from \"./img/CockpitBlank.jpg\"; /////////////////////////////////////////////////////////////////////////////////\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar trialTotal = 9; /////////////////////////////////////////////////////////////////////////////////\n// Plan the outcome memory test here\n/////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n// REACT COMPONENT START\n\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n    const userID = this.props.location.state.userID;\n    const date = this.props.location.state.date;\n    const startTime = this.props.location.state.startTime;\n    var currentDate = new Date(); // maybe change to local\n\n    var timeString = currentDate.toTimeString(); /////////////////////////////////////////////////////////////////////////////////\n    // SET COMPONENT STATES\n\n    this.state = {\n      userID: userID,\n      date: date,\n      startTime: startTime,\n      sectionTime: timeString,\n      taskSessionTry: 1,\n      taskSession: \"TrainingTask\",\n      level: 1,\n      //adapt later\n      trialNum: 1,\n      //adapt\n      trialTotal: trialTotal,\n      //adapt\n      //\n      trialSliderRT: null,\n      trialMu: null,\n      trialSgm: null,\n      trialTime: null,\n      trialScore: null,\n      valElem1: null,\n      valElem2: null,\n      valElem3: null,\n      colElem1: null,\n      colElem2: null,\n      colElem3: null // instructScreen: true,\n      // testScreen: false,\n      //\n      // debug: false, //if true, skip this section\n\n    }; // this.handleInstructLocal = this.handleInstructLocal.bind(this);\n    // this.testStart = this.testStart.bind(this);\n\n    /* prevents page from going down when space bar is hit .*/\n\n    window.addEventListener(\"keydown\", function (e) {\n      if (e.keyCode === 32 && e.target === document.body) {\n        e.preventDefault();\n      }\n    });\n  } /////////////////////////////////////////////////////////////////////////////////\n  // END COMPONENT STATE\n  // This handles instruction screen within the component USING KEYBOARD\n  // handleInstructLocal(key_pressed) {\n  //   var curText = this.state.instructScreenText;\n  //   var whichButton = key_pressed;\n  //\n  //   if (whichButton === 4 && curText > 1) {\n  //     this.setState({ instructScreenText: curText - 1 });\n  //   } else if (whichButton === 5 && curText < 6) {\n  //     this.setState({ instructScreenText: curText + 1 });\n  //   } else if (curText === 6 && whichButton === 10) {\n  //     //startmissionOne\n  //     setTimeout(\n  //       function () {\n  //         this.missionOne();\n  //       }.bind(this),\n  //       0\n  //     );\n  //   } else if (curText === 7 && whichButton === 10) {\n  //     //restart\n  //     this.setState({\n  //       instructScreenText: 1,\n  //     });\n  //   } else if (curText === 8 && whichButton === 10) {\n  //     //go to pathtask\n  //     setTimeout(\n  //       function () {\n  //         this.nextMission();\n  //       }.bind(this),\n  //       0\n  //     );\n  //   }\n  // }\n  //\n  // // handle key key_pressed\n  // _handleInstructKey = (event) => {\n  //   var key_pressed;\n  //\n  //   switch (event.keyCode) {\n  //     case 37:\n  //     //    this is left arrow\n  //     key_pressed = 4;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     case 39:\n  //     //    this is right arrow\n  //     key_pressed = 5;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     case 32:\n  //     //    this is SPACEBAR\n  //     key_pressed = 10;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     default:\n  //   }\n  // };\n  // _handleTestKey = (event) => {\n  //   var pressed;\n  //   var time_pressed;\n  //\n  //   switch (event.keyCode) {\n  //     case 49:\n  //     pressed = 1;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 50:\n  //     pressed = 2;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 51:\n  //     pressed = 3;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     //this is keycode for numpad\n  //     case 97:\n  //     pressed = 1;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 98:\n  //     pressed = 2;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 99:\n  //     pressed = 3;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     default:\n  //   }\n  // };\n  /////////////////////////////////////////////////////////////////////////////////\n  // END COMPONENT PROPS\n  // missionOne() {\n  //   var trialTime = Math.round(performance.now());\n  //   this.setState({\n  //     instructScreen: false,\n  //     testScreen: true,\n  //     trialNum: 1,\n  //     trialTime: trialTime,\n  //     trialSliderRT: 0,\n  //     trialKeypress: 0,\n  //     trialCorLog: [],\n  //     trialScore: 0,\n  //   });\n  // }\n\n\n  render() {\n    // testStart(trialNum) {\n    let text = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questions,\n      children: [\"How large is the alien population?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this); // return <div>{text}</div>;\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cockpit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        onSpacebarHit: result => window.alert(JSON.stringify(result))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this);\n  }\n\n  trialSave() {\n    var userID = this.state.userID;\n    var currentDate = new Date(); // maybe change to local\n\n    var sectionTime = currentDate.toTimeString();\n    var trialTime = Math.round(performance.now());\n    let saveString = {\n      userID: this.state.userID,\n      date: this.state.date,\n      startTime: this.state.startTime,\n      // this is when they start the expt\n      sectionTime: sectionTime,\n      //this is if they somehow refresh the page...\n      trialTime: trialTime,\n      taskSession: this.state.taskSession,\n      structNum: null,\n      level: this.state.level,\n      trialNum: this.state.trialNum,\n      trialTotal: this.state.trialTotal,\n      trialSliderRT: this.state.trialSliderRT,\n      trialMu: this.state.trialMu,\n      trialSgm: this.state.trialSgm,\n      trialTime: this.state.trialTime,\n      trialScore: this.state.trialScore,\n      valElem1: this.state.valElem1,\n      valElem2: this.state.valElem2,\n      valElem3: this.state.valElem3,\n      colElem1: this.state.colElem1,\n      colElem2: this.state.colElem2,\n      colElem3: this.state.colElem3 // outcomeVal: this.state.outcomeVal,\n      // outcomeIndx: this.state.outcomeIndx,\n      // stateWord: null,\n      // stateIndx: null,\n\n    }; //\n    // console.log(saveString);\n\n    try {\n      fetch(`${DATABASE_URL}/trainingTrial_data/` + userID, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(saveString)\n      });\n    } catch (e) {\n      console.log(\"Cant post?\");\n    } //lag a bit to make sure statestate is saved\n\n\n    setTimeout(function () {\n      this.trialNext();\n    }.bind(this), 10);\n  }\n\n  trialNext() {\n    var trialNum = this.state.trialNum + 1;\n    var trialTime = Math.round(performance.now());\n    this.setState({\n      trialTime: trialTime,\n      trialNum: trialNum,\n      trialSliderRT: null,\n      trialMu: null,\n      trialSgm: null,\n      trialTime: null,\n      trialScore: null,\n      valElem1: null,\n      valElem2: null,\n      valElem3: null,\n      colElem1: null,\n      colElem2: null,\n      colElem3: null\n    });\n  } // passMission() {\n  //   this.setState({\n  //     instructScreen: true,\n  //     testScreen: false,\n  //     instructScreenText: 8,\n  //   });\n  // }\n  // nextMission() {\n  //   document.removeEventListener(\"keyup\", this._handleInstructKey);\n  //   document.removeEventListener(\"keyup\", this._handleDebugKey);\n  //   this.props.history.push({\n  //     pathname: `/PathTask`,\n  //     state: {\n  //       userID: this.state.userID,\n  //       date: this.state.date,\n  //       startTime: this.state.startTime,\n  //\n  //     },\n  //   });\n  // }\n\n\n  componentDidMount() {\n    window.scrollTo(0, 0); //send the TrainingTask conditions?\n\n    setTimeout(function () {\n      this.trialSave();\n    }.bind(this), 0);\n    setTimeout(function () {\n      this.setState({\n        mounted: 1\n      });\n    }.bind(this), 5000);\n  }\n\n  componentWillUnmount() {\n    // fix Warning: Can't perform a React state update on an unmounted component\n    this.setState = (state, callback) => {\n      return;\n    };\n  }\n\n}\n\nexport default _c = withRouter(TrainingTask);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js"],"names":["React","useState","withRouter","DATABASE_URL","styles","Slider","blue","Cockpit","trialTotal","TrainingTask","Component","constructor","props","userID","location","state","date","startTime","currentDate","Date","timeString","toTimeString","sectionTime","taskSessionTry","taskSession","level","trialNum","trialSliderRT","trialMu","trialSgm","trialTime","trialScore","valElem1","valElem2","valElem3","colElem1","colElem2","colElem3","window","addEventListener","e","keyCode","target","document","body","preventDefault","render","text","questions","cockpit","result","alert","JSON","stringify","trialSave","Math","round","performance","now","saveString","structNum","fetch","method","headers","Accept","console","log","setTimeout","trialNext","bind","setState","componentDidMount","scrollTo","mounted","componentWillUnmount","callback"],"mappings":"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","sourcesContent":["import React, { useState }  from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport blue from \"./img/stimuli3_blue.jpg\";\nimport Cockpit from \"./img/CockpitBlank.jpg\";\n/////////////////////////////////////////////////////////////////////////////////\n\nvar trialTotal = 9;\n\n/////////////////////////////////////////////////////////////////////////////////\n// Plan the outcome memory test here\n\n/////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n// REACT COMPONENT START\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const userID = this.props.location.state.userID;\n    const date = this.props.location.state.date;\n    const startTime = this.props.location.state.startTime;\n    var currentDate = new Date(); // maybe change to local\n    var timeString = currentDate.toTimeString();\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // SET COMPONENT STATES\n    this.state = {\n      userID: userID,\n      date: date,\n      startTime: startTime,\n      sectionTime: timeString,\n      taskSessionTry: 1,\n      taskSession: \"TrainingTask\",\n      level: 1,//adapt later\n      trialNum: 1,//adapt\n      trialTotal: trialTotal,//adapt\n      //\n      trialSliderRT: null,\n      trialMu: null,\n      trialSgm: null,\n      trialTime: null,\n      trialScore: null,\n      valElem1: null,\n      valElem2: null,\n      valElem3: null,\n      colElem1: null,\n      colElem2: null,\n      colElem3: null\n      // instructScreen: true,\n      // testScreen: false,\n      //\n      // debug: false, //if true, skip this section\n    };\n\n    // this.handleInstructLocal = this.handleInstructLocal.bind(this);\n    // this.testStart = this.testStart.bind(this);\n\n    /* prevents page from going down when space bar is hit .*/\n    window.addEventListener(\"keydown\", function (e) {\n      if (e.keyCode === 32 && e.target === document.body) {\n        e.preventDefault();\n      }\n    });\n  }\n  /////////////////////////////////////////////////////////////////////////////////\n  // END COMPONENT STATE\n\n  // This handles instruction screen within the component USING KEYBOARD\n  // handleInstructLocal(key_pressed) {\n  //   var curText = this.state.instructScreenText;\n  //   var whichButton = key_pressed;\n  //\n  //   if (whichButton === 4 && curText > 1) {\n  //     this.setState({ instructScreenText: curText - 1 });\n  //   } else if (whichButton === 5 && curText < 6) {\n  //     this.setState({ instructScreenText: curText + 1 });\n  //   } else if (curText === 6 && whichButton === 10) {\n  //     //startmissionOne\n  //     setTimeout(\n  //       function () {\n  //         this.missionOne();\n  //       }.bind(this),\n  //       0\n  //     );\n  //   } else if (curText === 7 && whichButton === 10) {\n  //     //restart\n  //     this.setState({\n  //       instructScreenText: 1,\n  //     });\n  //   } else if (curText === 8 && whichButton === 10) {\n  //     //go to pathtask\n  //     setTimeout(\n  //       function () {\n  //         this.nextMission();\n  //       }.bind(this),\n  //       0\n  //     );\n  //   }\n  // }\n  //\n  // // handle key key_pressed\n  // _handleInstructKey = (event) => {\n  //   var key_pressed;\n  //\n  //   switch (event.keyCode) {\n  //     case 37:\n  //     //    this is left arrow\n  //     key_pressed = 4;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     case 39:\n  //     //    this is right arrow\n  //     key_pressed = 5;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     case 32:\n  //     //    this is SPACEBAR\n  //     key_pressed = 10;\n  //     this.handleInstructLocal(key_pressed);\n  //     break;\n  //     default:\n  //   }\n  // };\n\n  // _handleTestKey = (event) => {\n  //   var pressed;\n  //   var time_pressed;\n  //\n  //   switch (event.keyCode) {\n  //     case 49:\n  //     pressed = 1;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 50:\n  //     pressed = 2;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 51:\n  //     pressed = 3;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     //this is keycode for numpad\n  //     case 97:\n  //     pressed = 1;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 98:\n  //     pressed = 2;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     case 99:\n  //     pressed = 3;\n  //     time_pressed = Math.round(performance.now());\n  //     this.testCheck(pressed, time_pressed);\n  //     break;\n  //     default:\n  //   }\n  // };\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // END COMPONENT PROPS\n\n  // missionOne() {\n  //   var trialTime = Math.round(performance.now());\n  //   this.setState({\n  //     instructScreen: false,\n  //     testScreen: true,\n  //     trialNum: 1,\n  //     trialTime: trialTime,\n  //     trialSliderRT: 0,\n  //     trialKeypress: 0,\n  //     trialCorLog: [],\n  //     trialScore: 0,\n  //   });\n  // }\n  render() {\n\n    // testStart(trialNum) {\n\n    let text = (\n      <div className={styles.questions}>\n      How large is the alien population?\n      <br />\n      <br />\n      <br />\n      </div>\n\n    );\n\n\n\n    // return <div>{text}</div>;\n    return (<div className={styles.cockpit}>\n      <div>{text}</div>\n      <Slider onSpacebarHit={(result) => window.alert(JSON.stringify(result))} />\n      </div>);\n\n    }\n\n    trialSave() {\n      var userID = this.state.userID;\n      var currentDate = new Date(); // maybe change to local\n      var sectionTime = currentDate.toTimeString();\n      var trialTime = Math.round(performance.now());\n\n      let saveString = {\n        userID: this.state.userID,\n        date: this.state.date,\n        startTime: this.state.startTime, // this is when they start the expt\n        sectionTime: sectionTime, //this is if they somehow refresh the page...\n        trialTime: trialTime,\n        taskSession: this.state.taskSession,\n\n        structNum: null,\n\n        level: this.state.level,\n        trialNum: this.state.trialNum,\n        trialTotal: this.state.trialTotal,\n        trialSliderRT: this.state.trialSliderRT,\n        trialMu: this.state.trialMu,\n        trialSgm: this.state.trialSgm,\n        trialTime: this.state.trialTime,\n        trialScore: this.state.trialScore,\n        valElem1: this.state.valElem1,\n        valElem2: this.state.valElem2,\n        valElem3: this.state.valElem3,\n        colElem1: this.state.colElem1,\n        colElem2: this.state.colElem2,\n        colElem3: this.state.colElem3\n\n        // outcomeVal: this.state.outcomeVal,\n        // outcomeIndx: this.state.outcomeIndx,\n        // stateWord: null,\n        // stateIndx: null,\n\n      };\n      //\n      // console.log(saveString);\n\n      try {\n        fetch(`${DATABASE_URL}/trainingTrial_data/` + userID, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(saveString),\n        });\n      } catch (e) {\n        console.log(\"Cant post?\");\n      }\n\n      //lag a bit to make sure statestate is saved\n      setTimeout(\n        function () {\n          this.trialNext();\n        }.bind(this),\n        10\n      );\n    }\n\n    trialNext() {\n      var trialNum = this.state.trialNum + 1;\n      var trialTime = Math.round(performance.now());\n\n      this.setState({\n        trialTime: trialTime,\n        trialNum: trialNum,\n        trialSliderRT: null,\n        trialMu: null,\n        trialSgm: null,\n        trialTime: null,\n        trialScore: null,\n        valElem1: null,\n        valElem2: null,\n        valElem3: null,\n        colElem1: null,\n        colElem2: null,\n        colElem3: null\n      });\n\n    }\n\n\n\n\n    // passMission() {\n    //   this.setState({\n    //     instructScreen: true,\n    //     testScreen: false,\n    //     instructScreenText: 8,\n    //   });\n    // }\n\n    // nextMission() {\n    //   document.removeEventListener(\"keyup\", this._handleInstructKey);\n    //   document.removeEventListener(\"keyup\", this._handleDebugKey);\n    //   this.props.history.push({\n    //     pathname: `/PathTask`,\n    //     state: {\n    //       userID: this.state.userID,\n    //       date: this.state.date,\n    //       startTime: this.state.startTime,\n    //\n    //     },\n    //   });\n    // }\n\n    componentDidMount() {\n      window.scrollTo(0, 0);\n      //send the TrainingTask conditions?\n\n      setTimeout(\n        function () {\n          this.trialSave();\n        }.bind(this),\n        0\n      );\n\n      setTimeout(\n        function () {\n          this.setState({\n            mounted: 1,\n          });\n        }.bind(this),\n        5000\n      );\n    }\n\n    componentWillUnmount() {\n      // fix Warning: Can't perform a React state update on an unmounted component\n      this.setState = (state, callback) => {\n        return;\n      };\n    }\n}\n\n  export default withRouter(TrainingTask);\n"]},"metadata":{},"sourceType":"module"}