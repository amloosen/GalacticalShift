{"ast":null,"code":"var _jsxFileName = \"/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/sliderOutcome.js\";\nimport { range } from \"lodash\";\nimport React, { Component } from \"react\";\nimport normalPdf from \"normal-pdf\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass OutcomeSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    const mu = this.props.mu;\n    const sgm = this.props.sgm; // const mu = 50;\n    // const sgm = 20;\n    // const trueValue = 50;\n\n    const trueValue = this.props.value;\n    const xValues = range(0, 100, 0.5);\n    const yValues = xValues.map(x => normalPdf(x, mu, sgm));\n    const yValuesAdaptNew = yValues.map(function (element) {\n      return element * 1000;\n    });\n    var xValuesOutcome = new Array(200).fill(null);\n    xValuesOutcome[trueValue * 2] = yValuesAdaptNew[trueValue * 2];\n    this.state = {\n      series: [{\n        data: xValuesOutcome,\n        type: \"column\"\n      }],\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: '55%',\n          endingShape: 'rounded'\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: [\"#DAA520\"]\n      },\n      // colors: [\"#DAA520\"],\n      //   fill: {colors: ['#d2eaf2']},\n      //   dataLabels: {\n      //     enabled: false,\n      //   },\n      //   stroke: {\n      //     curve: 'smooth',\n      //   },\n      //   markers: {\n      //     size: 0\n      //   },\n      //   yaxis: {\n      //     min:0,\n      //     labels:{show: false },\n      //     axisTicks:{\n      //       show: false\n      //     },\n      //     lines: {\n      //       show: false\n      //     }\n      //   },\n      xaxis: {\n        color: '#d2eaf2',\n        // min: 0,\n        // max: 100,\n        tickAmount: 5,\n        overwriteCategories: ['0', '25', '50', '75', '100'],\n        lines: {\n          show: false\n        },\n        axisTicks: {\n          color: '#e7e6e2',\n          width: 3,\n          height: 10\n        },\n        axisBorder: {\n          show: true,\n          color: '#e7e6e2',\n          height: 4,\n          width: '100%'\n        },\n        labels: {\n          rotate: 0,\n          style: {\n            fontSize: '20px',\n            colors: ['#e7e6e2', '#e7e6e2', '#e7e6e2', '#e7e6e2', '#e7e6e2'],\n            offsetX: 0,\n            offsetY: 0\n          }\n        }\n      } //   animations: {\n      //   enabled: false},\n      //   grid: {show: false},\n      //   tooltip: {enabled: false},\n      //   legend: {\n      //   show: false}\n      // },\n\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        options: this.state.options,\n        series: this.state.series,\n        type: \"bar\",\n        width: 700,\n        height: 350,\n        align: \"center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default OutcomeSlider;","map":{"version":3,"sources":["/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/sliderOutcome.js"],"names":["range","React","Component","normalPdf","ReactApexChart","OutcomeSlider","constructor","props","mu","sgm","trueValue","value","xValues","yValues","map","x","yValuesAdaptNew","element","xValuesOutcome","Array","fill","state","series","data","type","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","stroke","show","width","colors","xaxis","color","tickAmount","overwriteCategories","lines","axisTicks","height","axisBorder","labels","rotate","style","fontSize","offsetX","offsetY","render","options"],"mappings":"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","sourcesContent":["import { range } from \"lodash\";\nimport React, { Component } from \"react\";\nimport normalPdf from \"normal-pdf\";\nimport ReactApexChart from \"react-apexcharts\";\n\nclass OutcomeSlider extends React.Component{\n  constructor(props) {\n  super(props);\n  const mu  = this.props.mu\n  const sgm  = this.props.sgm\n  // const mu = 50;\n  // const sgm = 20;\n  // const trueValue = 50;\n  const trueValue = this.props.value;\n\n  const xValues = range(0, 100,0.5);\n  const yValues = xValues.map((x) => normalPdf(x, mu, sgm))\n  const yValuesAdaptNew = yValues.map(function(element) {\n\t                     return element*1000;});\n\n var xValuesOutcome = new Array(200).fill(null);\n xValuesOutcome[trueValue*2] = yValuesAdaptNew[trueValue*2];\n\n  this.state = {\n    series: [\n      { data: xValuesOutcome,\n      type: \"column\"},\n    ],\n    plotOptions: {bar: {\n                      horizontal: false,\n                      columnWidth: '55%',\n                      endingShape: 'rounded'\n                    },\n                  },\n                  dataLabels: {\n                    enabled: false\n                  },\n                  stroke: {\n                    show: true,\n                    width: 2,\n                    colors: [\"#DAA520\"]\n                  },\n      // colors: [\"#DAA520\"],\n    //   fill: {colors: ['#d2eaf2']},\n    //   dataLabels: {\n    //     enabled: false,\n    //   },\n    //   stroke: {\n    //     curve: 'smooth',\n    //   },\n    //   markers: {\n    //     size: 0\n    //   },\n    //   yaxis: {\n    //     min:0,\n    //     labels:{show: false },\n    //     axisTicks:{\n    //       show: false\n    //     },\n    //     lines: {\n    //       show: false\n    //     }\n    //   },\n      xaxis: {\n        color:'#d2eaf2',\n        // min: 0,\n        // max: 100,\n        tickAmount: 5,\n        overwriteCategories: ['0', '25', '50', '75', '100'],\n        lines: {\n          show: false\n        },\n        axisTicks: {\n          color: '#e7e6e2',\n          width: 3,\n          height: 10\n        },\n        axisBorder: {\n          show: true,\n          color: '#e7e6e2',\n          height: 4,\n        width: '100%'},\n        labels: {\n          rotate: 0,\n          style: {\n            fontSize: '20px',\n            colors: ['#e7e6e2','#e7e6e2','#e7e6e2','#e7e6e2','#e7e6e2'],\n            offsetX: 0,\n         offsetY: 0}\n        }\n      },\n    //   animations: {\n    //   enabled: false},\n    //   grid: {show: false},\n    //   tooltip: {enabled: false},\n    //   legend: {\n    //   show: false}\n    // },\n  };\n}\nrender (){\n  return (\n   <div>\n   <ReactApexChart options={this.state.options} series={this.state.series}  type='bar' width={700} height={350} align=\"center\"/>\n   </div>\n  );\n };\n}\n\nexport default OutcomeSlider;\n"]},"metadata":{},"sourceType":"module"}