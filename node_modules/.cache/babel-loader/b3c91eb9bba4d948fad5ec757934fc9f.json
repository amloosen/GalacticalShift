{"ast":null,"code":"var _jsxFileName = \"/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport Cockpit from \"./img/CockpitBlank.jpg\"; // import ElementsTraining  from \"./elementsTraining\";\n/////////////////////////////////////////////////////////////////////////////////\n// var trialTotal = 9;\n//\n// setTimeout(\n//   function () {\n//     this.trialSave();\n//   }.bind(this),\n//   0\n// );\n//\n//\n// setTimeout(\n//   function () {\n//     this.setState({\n//       mounted: 1,\n//     });\n//   }.bind(this),\n//   5000\n// );\n/////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n// REACT COMPONENT START\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n    const userID = this.props.location.state.userID;\n    const date = this.props.location.state.date;\n    const startTime = this.props.location.state.startTime;\n    var currentDate = new Date(); // maybe change to local\n\n    var timeString = currentDate.toTimeString(); /////////////////////////////////////////////////////////////////////////////////\n    // SET COMPONENT STATES\n\n    this.state = {\n      userID: userID,\n      date: date,\n      startTime: startTime,\n      sectionTime: timeString,\n      taskSessionTry: 1,\n      taskSession: \"TrainingTask\",\n      level: 1,\n      //adapt later\n      trialNum: 1,\n      //adapt\n      trialTotal: 1,\n      //adapt\n      //\n      trialSliderRT: null,\n      trialMu: null,\n      trialSgm: null,\n      trialTime: null,\n      trialScore: null,\n      valElem1: null,\n      valElem2: null,\n      valElem3: null,\n      colElem1: null,\n      colElem2: null,\n      colElem3: null,\n      taskPart: 2\n    }; // this.switchImage = this.switchImage.bind(this);\n  } // switchTaskpart() {\n  //   this.setState({\n  //     taskPart: 2\n  //   });\n  // }\n  // componentDidMount() {\n  //   setTimeout(this.switchTaskpart, 1000);\n  // }\n\n\n  render() {\n    // if (this.state.taskPart===1){\n    // return (<div className={styles.cockpit}>\n    //   //   <div>{text}</div>\n    //   <ElementsTraining onSpacebarHit={(result) => window.alert(JSON.stringify(result))} />\n    //   </div>);\n    //\n    // } else {\n    let text = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questions,\n      children: [\"How large is the alien population?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cockpit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        onSpacebarHit: result => window.alert(JSON.stringify(result))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }, this); // }\n  }\n\n  renderElements(val, col) {\n    return /*#__PURE__*/_jsxDEV(ElementsTraining, {\n      value: val,\n      col: col,\n      training_apple_col: this.props.training_apple_col\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 16\n    }, this);\n  } ///\n  //   trialSave() {\n  //     var userID = this.state.userID;\n  //     var currentDate = new Date(); // maybe change to local\n  //     var sectionTime = currentDate.toTimeString();\n  //     var trialTime = Math.round(performance.now());\n  //\n  //     let saveString = {\n  //       userID: this.state.userID,\n  //       date: this.state.date,\n  //       startTime: this.state.startTime, // this is when they start the expt\n  //       sectionTime: sectionTime, //this is if they somehow refresh the page...\n  //       trialTime: trialTime,\n  //       taskSession: this.state.taskSession,\n  //\n  //       structNum: null,\n  //\n  //       level: this.state.level,\n  //       trialNum: this.state.trialNum,\n  //       trialTotal: this.state.trialTotal,\n  //       trialSliderRT: this.state.trialSliderRT,\n  //       trialMu: this.state.trialMu,\n  //       trialSgm: this.state.trialSgm,\n  //       trialTime: this.state.trialTime,\n  //       trialScore: this.state.trialScore,\n  //       valElem1: this.state.valElem1,\n  //       valElem2: this.state.valElem2,\n  //       valElem3: this.state.valElem3,\n  //       colElem1: this.state.colElem1,\n  //       colElem2: this.state.colElem2,\n  //       colElem3: this.state.colElem3\n  //\n  //     };\n  //     //\n  //     // console.log(saveString);\n  //\n  //     try {\n  //       fetch(`${DATABASE_URL}/trainingTrial_data/` + userID, {\n  //         method: \"POST\",\n  //         headers: {\n  //           Accept: \"application/json\",\n  //           \"Content-Type\": \"application/json\",\n  //         },\n  //         body: JSON.stringify(saveString),\n  //       });\n  //     } catch (e) {\n  //       console.log(\"Cant post?\");\n  //     }\n  //\n  //     //lag a bit to make sure statestate is saved\n  //     setTimeout(\n  //       function () {\n  //         this.trialNext();\n  //       }.bind(this),\n  //       10\n  //     );\n  //   }\n  //\n  //   trialNext() {\n  //     var trialNum = this.state.trialNum + 1;\n  //     var trialTime = Math.round(performance.now());\n  //\n  //     this.setState({\n  //       trialTime: trialTime,\n  //       trialNum: trialNum,\n  //       trialSliderRT: null,\n  //       trialMu: null,\n  //       trialSgm: null,\n  //       trialTime: null,\n  //       trialScore: null,\n  //       valElem1: null,\n  //       valElem2: null,\n  //       valElem3: null,\n  //       colElem1: null,\n  //       colElem2: null,\n  //       colElem3: null\n  //     });\n  //   }\n  //\n  // componentWillUnmount() {\n  //   // fix Warning: Can't perform a React state update on an unmounted component\n  //   this.setState = (state, callback) => {\n  //     return;\n  //   };\n  // }\n\n\n}\n\nexport default _c = withRouter(TrainingTask);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js"],"names":["React","useState","withRouter","DATABASE_URL","styles","Slider","Cockpit","TrainingTask","Component","constructor","props","userID","location","state","date","startTime","currentDate","Date","timeString","toTimeString","sectionTime","taskSessionTry","taskSession","level","trialNum","trialTotal","trialSliderRT","trialMu","trialSgm","trialTime","trialScore","valElem1","valElem2","valElem3","colElem1","colElem2","colElem3","taskPart","render","text","questions","cockpit","result","window","alert","JSON","stringify","renderElements","val","col","training_apple_col"],"mappings":"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","sourcesContent":["import React, { useState }  from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport Cockpit from \"./img/CockpitBlank.jpg\";\n// import ElementsTraining  from \"./elementsTraining\";\n/////////////////////////////////////////////////////////////////////////////////\n\n// var trialTotal = 9;\n//\n// setTimeout(\n//   function () {\n//     this.trialSave();\n//   }.bind(this),\n//   0\n// );\n//\n//\n// setTimeout(\n//   function () {\n//     this.setState({\n//       mounted: 1,\n//     });\n//   }.bind(this),\n//   5000\n// );\n/////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n// REACT COMPONENT START\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const userID = this.props.location.state.userID;\n    const date = this.props.location.state.date;\n    const startTime = this.props.location.state.startTime;\n    var currentDate = new Date(); // maybe change to local\n    var timeString = currentDate.toTimeString();\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // SET COMPONENT STATES\n    this.state = {\n      userID: userID,\n      date: date,\n      startTime: startTime,\n      sectionTime: timeString,\n      taskSessionTry: 1,\n      taskSession: \"TrainingTask\",\n      level: 1,//adapt later\n      trialNum: 1,//adapt\n      trialTotal: 1,//adapt\n      //\n      trialSliderRT: null,\n      trialMu: null,\n      trialSgm: null,\n      trialTime: null,\n      trialScore: null,\n      valElem1: null,\n      valElem2: null,\n      valElem3: null,\n      colElem1: null,\n      colElem2: null,\n      colElem3: null,\n      taskPart: 2\n    };\n    // this.switchImage = this.switchImage.bind(this);\n  }\n\n  // switchTaskpart() {\n  //   this.setState({\n  //     taskPart: 2\n  //   });\n  // }\n\n    // componentDidMount() {\n    //   setTimeout(this.switchTaskpart, 1000);\n    // }\n\n    render() {\n      // if (this.state.taskPart===1){\n\n        // return (<div className={styles.cockpit}>\n        //   //   <div>{text}</div>\n        //   <ElementsTraining onSpacebarHit={(result) => window.alert(JSON.stringify(result))} />\n        //   </div>);\n        //\n        // } else {\n          let text = (\n            <div className={styles.questions}>\n            How large is the alien population?\n            <br />\n            <br />\n            <br />\n            </div>\n\n          );\n          return (<div className={styles.cockpit}>\n            <div>{text}</div>\n            <Slider onSpacebarHit={(result) => window.alert(JSON.stringify(result))} />\n            </div>);\n        // }\n      }\n\n      renderElements(val, col){\n        return <ElementsTraining value={val} col={col} training_apple_col={this.props.training_apple_col}/>;\n      }\n\n\n///\n    //   trialSave() {\n    //     var userID = this.state.userID;\n    //     var currentDate = new Date(); // maybe change to local\n    //     var sectionTime = currentDate.toTimeString();\n    //     var trialTime = Math.round(performance.now());\n    //\n    //     let saveString = {\n    //       userID: this.state.userID,\n    //       date: this.state.date,\n    //       startTime: this.state.startTime, // this is when they start the expt\n    //       sectionTime: sectionTime, //this is if they somehow refresh the page...\n    //       trialTime: trialTime,\n    //       taskSession: this.state.taskSession,\n    //\n    //       structNum: null,\n    //\n    //       level: this.state.level,\n    //       trialNum: this.state.trialNum,\n    //       trialTotal: this.state.trialTotal,\n    //       trialSliderRT: this.state.trialSliderRT,\n    //       trialMu: this.state.trialMu,\n    //       trialSgm: this.state.trialSgm,\n    //       trialTime: this.state.trialTime,\n    //       trialScore: this.state.trialScore,\n    //       valElem1: this.state.valElem1,\n    //       valElem2: this.state.valElem2,\n    //       valElem3: this.state.valElem3,\n    //       colElem1: this.state.colElem1,\n    //       colElem2: this.state.colElem2,\n    //       colElem3: this.state.colElem3\n    //\n    //     };\n    //     //\n    //     // console.log(saveString);\n    //\n    //     try {\n    //       fetch(`${DATABASE_URL}/trainingTrial_data/` + userID, {\n    //         method: \"POST\",\n    //         headers: {\n    //           Accept: \"application/json\",\n    //           \"Content-Type\": \"application/json\",\n    //         },\n    //         body: JSON.stringify(saveString),\n    //       });\n    //     } catch (e) {\n    //       console.log(\"Cant post?\");\n    //     }\n    //\n    //     //lag a bit to make sure statestate is saved\n    //     setTimeout(\n    //       function () {\n    //         this.trialNext();\n    //       }.bind(this),\n    //       10\n    //     );\n    //   }\n    //\n    //   trialNext() {\n    //     var trialNum = this.state.trialNum + 1;\n    //     var trialTime = Math.round(performance.now());\n    //\n    //     this.setState({\n    //       trialTime: trialTime,\n    //       trialNum: trialNum,\n    //       trialSliderRT: null,\n    //       trialMu: null,\n    //       trialSgm: null,\n    //       trialTime: null,\n    //       trialScore: null,\n    //       valElem1: null,\n    //       valElem2: null,\n    //       valElem3: null,\n    //       colElem1: null,\n    //       colElem2: null,\n    //       colElem3: null\n    //     });\n    //   }\n    //\n    // componentWillUnmount() {\n    //   // fix Warning: Can't perform a React state update on an unmounted component\n    //   this.setState = (state, callback) => {\n    //     return;\n    //   };\n    // }\n  }\n\n  export default withRouter(TrainingTask);\n"]},"metadata":{},"sourceType":"module"}