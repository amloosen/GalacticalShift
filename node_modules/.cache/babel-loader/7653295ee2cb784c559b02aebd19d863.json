{"ast":null,"code":"var _jsxFileName = \"/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport Blue from \"./img/stimuli3_blue.jpg\";\nimport Cockpit from \"./img/CockpitBlank.jpg\"; /////////////////////////////////////////////////////////////////////////////////\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar trialTotal = 9; /////////////////////////////////////////////////////////////////////////////////\n// Plan the outcome memory test here\n/////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n// REACT COMPONENT START\n\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n    const userID = this.props.location.state.userID;\n    const date = this.props.location.state.date;\n    const startTime = this.props.location.state.startTime;\n    var currentDate = new Date(); // maybe change to local\n\n    var timeString = currentDate.toTimeString(); /////////////////////////////////////////////////////////////////////////////////\n    // SET COMPONENT STATES\n\n    this.state = {\n      userID: userID,\n      date: date,\n      startTime: startTime,\n      sectionTime: timeString,\n      taskSessionTry: 1,\n      taskSession: \"TrainingTask\",\n      level: 1,\n      //adapt later\n      trialNum: 1,\n      //adapt\n      trialTotal: trialTotal,\n      //adapt\n      //\n      trialSliderRT: null,\n      trialMu: null,\n      trialSgm: null,\n      trialTime: null,\n      trialScore: null,\n      valElem1: null,\n      valElem2: null,\n      valElem3: null,\n      colElem1: null,\n      colElem2: null,\n      colElem3: null,\n      taskPart: 1\n    };\n    this.switchImage = this.switchImage.bind(this);\n  }\n\n  switchTaskpart() {\n    this.setState({\n      taskPart: 2\n    });\n  }\n\n  componentDidMount() {\n    setTimeout(this.switchTaskpart, 1000);\n  }\n\n  render() {\n    if (this.state.taskPart === 1) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.cockpit,\n        children: [\"//   \", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 16\n        }, this), \"//   \", /*#__PURE__*/_jsxDEV(Slider, {\n          onSpacebarHit: result => window.alert(JSON.stringify(result))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this);\n    } else {\n      let text = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.questions,\n        children: [\"How large is the alien population?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this);\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.cockpit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          onSpacebarHit: result => window.alert(JSON.stringify(result))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 19\n      }, this);\n    }\n  }\n\n  trialSave() {\n    var userID = this.state.userID;\n    var currentDate = new Date(); // maybe change to local\n\n    var sectionTime = currentDate.toTimeString();\n    var trialTime = Math.round(performance.now());\n    let saveString = {\n      userID: this.state.userID,\n      date: this.state.date,\n      startTime: this.state.startTime,\n      // this is when they start the expt\n      sectionTime: sectionTime,\n      //this is if they somehow refresh the page...\n      trialTime: trialTime,\n      taskSession: this.state.taskSession,\n      structNum: null,\n      level: this.state.level,\n      trialNum: this.state.trialNum,\n      trialTotal: this.state.trialTotal,\n      trialSliderRT: this.state.trialSliderRT,\n      trialMu: this.state.trialMu,\n      trialSgm: this.state.trialSgm,\n      trialTime: this.state.trialTime,\n      trialScore: this.state.trialScore,\n      valElem1: this.state.valElem1,\n      valElem2: this.state.valElem2,\n      valElem3: this.state.valElem3,\n      colElem1: this.state.colElem1,\n      colElem2: this.state.colElem2,\n      colElem3: this.state.colElem3\n    }; //\n    // console.log(saveString);\n\n    try {\n      fetch(`${DATABASE_URL}/trainingTrial_data/` + userID, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(saveString)\n      });\n    } catch (e) {\n      console.log(\"Cant post?\");\n    } //lag a bit to make sure statestate is saved\n\n\n    setTimeout(function () {\n      this.trialNext();\n    }.bind(this), 10);\n  }\n\n  trialNext() {\n    var trialNum = this.state.trialNum + 1;\n    var trialTime = Math.round(performance.now());\n    this.setState({\n      trialTime: trialTime,\n      trialNum: trialNum,\n      trialSliderRT: null,\n      trialMu: null,\n      trialSgm: null,\n      trialTime: null,\n      trialScore: null,\n      valElem1: null,\n      valElem2: null,\n      valElem3: null,\n      colElem1: null,\n      colElem2: null,\n      colElem3: null\n    });\n  }\n\n  componentWillUnmount() {\n    // fix Warning: Can't perform a React state update on an unmounted component\n    this.setState = (state, callback) => {\n      return;\n    };\n  }\n\n}\n\nexport default _c = withRouter(TrainingTask);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js"],"names":["React","useState","withRouter","DATABASE_URL","styles","Slider","Blue","Cockpit","trialTotal","TrainingTask","Component","constructor","props","userID","location","state","date","startTime","currentDate","Date","timeString","toTimeString","sectionTime","taskSessionTry","taskSession","level","trialNum","trialSliderRT","trialMu","trialSgm","trialTime","trialScore","valElem1","valElem2","valElem3","colElem1","colElem2","colElem3","taskPart","switchImage","bind","switchTaskpart","setState","componentDidMount","setTimeout","render","cockpit","text","result","window","alert","JSON","stringify","questions","trialSave","Math","round","performance","now","saveString","structNum","fetch","method","headers","Accept","body","e","console","log","trialNext","componentWillUnmount","callback"],"mappings":"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","sourcesContent":["import React, { useState }  from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport Blue from \"./img/stimuli3_blue.jpg\";\nimport Cockpit from \"./img/CockpitBlank.jpg\";\n/////////////////////////////////////////////////////////////////////////////////\n\nvar trialTotal = 9;\n\n/////////////////////////////////////////////////////////////////////////////////\n// Plan the outcome memory test here\n\n/////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n// REACT COMPONENT START\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const userID = this.props.location.state.userID;\n    const date = this.props.location.state.date;\n    const startTime = this.props.location.state.startTime;\n    var currentDate = new Date(); // maybe change to local\n    var timeString = currentDate.toTimeString();\n\n    /////////////////////////////////////////////////////////////////////////////////\n    // SET COMPONENT STATES\n    this.state = {\n      userID: userID,\n      date: date,\n      startTime: startTime,\n      sectionTime: timeString,\n      taskSessionTry: 1,\n      taskSession: \"TrainingTask\",\n      level: 1,//adapt later\n      trialNum: 1,//adapt\n      trialTotal: trialTotal,//adapt\n      //\n      trialSliderRT: null,\n      trialMu: null,\n      trialSgm: null,\n      trialTime: null,\n      trialScore: null,\n      valElem1: null,\n      valElem2: null,\n      valElem3: null,\n      colElem1: null,\n      colElem2: null,\n      colElem3: null,\n      taskPart: 1\n    };\n    this.switchImage = this.switchImage.bind(this);\n  }\n\n  switchTaskpart() {\n    this.setState({\n      taskPart: 2\n    });\n  }\n\n    componentDidMount() {\n      setTimeout(this.switchTaskpart, 1000);\n    }\n\n    render() {\n      if (this.state.taskPart===1){\n\n        return (<div className={styles.cockpit}>\n          //   <div>{text}</div>\n          //   <Slider onSpacebarHit={(result) => window.alert(JSON.stringify(result))} />\n          </div>);\n\n        } else {\n          let text = (\n            <div className={styles.questions}>\n            How large is the alien population?\n            <br />\n            <br />\n            <br />\n            </div>\n\n          );\n          return (<div className={styles.cockpit}>\n            <div>{text}</div>\n            <Slider onSpacebarHit={(result) => window.alert(JSON.stringify(result))} />\n            </div>);\n        }\n      }\n\n      trialSave() {\n        var userID = this.state.userID;\n        var currentDate = new Date(); // maybe change to local\n        var sectionTime = currentDate.toTimeString();\n        var trialTime = Math.round(performance.now());\n\n        let saveString = {\n          userID: this.state.userID,\n          date: this.state.date,\n          startTime: this.state.startTime, // this is when they start the expt\n          sectionTime: sectionTime, //this is if they somehow refresh the page...\n          trialTime: trialTime,\n          taskSession: this.state.taskSession,\n\n          structNum: null,\n\n          level: this.state.level,\n          trialNum: this.state.trialNum,\n          trialTotal: this.state.trialTotal,\n          trialSliderRT: this.state.trialSliderRT,\n          trialMu: this.state.trialMu,\n          trialSgm: this.state.trialSgm,\n          trialTime: this.state.trialTime,\n          trialScore: this.state.trialScore,\n          valElem1: this.state.valElem1,\n          valElem2: this.state.valElem2,\n          valElem3: this.state.valElem3,\n          colElem1: this.state.colElem1,\n          colElem2: this.state.colElem2,\n          colElem3: this.state.colElem3\n\n        };\n        //\n        // console.log(saveString);\n\n        try {\n          fetch(`${DATABASE_URL}/trainingTrial_data/` + userID, {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(saveString),\n          });\n        } catch (e) {\n          console.log(\"Cant post?\");\n        }\n\n        //lag a bit to make sure statestate is saved\n        setTimeout(\n          function () {\n            this.trialNext();\n          }.bind(this),\n          10\n        );\n      }\n\n      trialNext() {\n        var trialNum = this.state.trialNum + 1;\n        var trialTime = Math.round(performance.now());\n\n        this.setState({\n          trialTime: trialTime,\n          trialNum: trialNum,\n          trialSliderRT: null,\n          trialMu: null,\n          trialSgm: null,\n          trialTime: null,\n          trialScore: null,\n          valElem1: null,\n          valElem2: null,\n          valElem3: null,\n          colElem1: null,\n          colElem2: null,\n          colElem3: null\n        });\n\n      }\n\n\n    \n\n    componentWillUnmount() {\n      // fix Warning: Can't perform a React state update on an unmounted component\n      this.setState = (state, callback) => {\n        return;\n      };\n    }\n  }\n\n  export default withRouter(TrainingTask);\n"]},"metadata":{},"sourceType":"module"}