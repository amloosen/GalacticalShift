{"ast":null,"code":"var _jsxFileName = \"/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport Cockpit from \"./img/CockpitBlank.jpg\"; // import ElementsTraining  from \"./elementsTraining\";\n/////////////////////////////////////////////////////////////////////////////////\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar trialTotal = 9; //\n// setTimeout(\n//   function () {\n//     this.trialSave();\n//   }.bind(this),\n//   0\n// );\n//\n//\n// setTimeout(\n//   function () {\n//     this.setState({\n//       mounted: 1,\n//     });\n//   }.bind(this),\n//   5000\n// );\n/////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n// REACT COMPONENT START\n\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props); // const userID = this.props.location.state.userID;\n    // const date = this.props.location.state.date;\n    // const startTime = this.props.location.state.startTime;\n    // var currentDate = new Date(); // maybe change to local\n    // var timeString = currentDate.toTimeString();\n\n    var trialSgmMu = Array(trialTotal).fill().map(() => Array(3).fill(0));\n    var trialRT = Array(trialTotal).fill().map(() => Array(3).fill(0)); /////////////////////////////////////////////////////////////////////////////////\n    // SET COMPONENT STATES\n\n    this.state = {\n      // userID: userID,\n      // date: date,\n      // startTime: startTime,\n      // sectionTime: timeString,\n      // taskSessionTry: 1,\n      // taskSession: \"TrainingTask\",\n      // level: 1,//adapt later\n      trialNum: 1,\n      //adapt\n      trialRT: trialRT,\n      trialTime0: 0,\n      // trialTotal: 1,//adapt\n      // //\n      // trialSliderRT: null,\n      trialSgmMu: trialSgmMu // trialTime: null,\n      // trialScore: null,\n      // valElem1: null,\n      // valElem2: null,\n      // valElem3: null,\n      // colElem1: null,\n      // colElem2: null,\n      // colElem3: null,\n      // taskPart: 2\n\n    }; // this.switchImage = this.switchImage.bind(this);\n  } // switchTaskpart() {\n  //   this.setState({\n  //     taskPart: 2\n  //   });\n  // }\n  //\n  // componentDidMount() {\n  //   setTimeout(this.switchTaskpart, 1000);\n  // }\n\n\n  saveSgmMu(result) {\n    debugger;\n    trialSgmMu[trialNum - 1][0] = trialNum;\n    trialSgmMu[trialNum - 1][1] = result.sgm;\n    trialSgmMu[trialNum - 1][2] = result.mu;\n    trialRT[trialNum - 1][0] = trialNum;\n    trialRT[trialNum - 1][1] = Math.round(performance.now()) - trialTime0;\n    setTimeout();\n  } // setTrialVar() {\n  //\n  // }\n\n\n  render() {\n    var trialNum = this.state.trialNum + 1;\n    var trialTime0 = Math.round(performance.now());\n    var trialSgmMu = this.state.trialSgmMu;\n    var trialRT = this.state.trialRT; // if (this.state.taskPart===1){\n    // return (<div className={styles.cockpit}>\n    //   //   <div>{text}</div>\n    //   <ElementsTraining onSpacebarHit={(result) => window.alert(JSON.stringify(result))} />\n    //   </div>);\n    //\n    // } else {\n\n    let text = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questions,\n      children: [\"How large is the alien population?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cockpit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        onSpacebarHit: result => this.saveSgmMu(result)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }, this); // }// window.alert(JSON.stringify(result))} />\n  } // renderElements(val, col){\n  //   return <ElementsTraining value={val} col={col} training_apple_col={this.props.training_apple_col}/>;\n  // }\n  ///\n  //   trialSave() {\n  //     var userID = this.state.userID;\n  //     var currentDate = new Date(); // maybe change to local\n  //     var sectionTime = currentDate.toTimeString();\n  //     var trialTime = Math.round(performance.now());\n  //\n  //     let saveString = {\n  //       userID: this.state.userID,\n  //       date: this.state.date,\n  //       startTime: this.state.startTime, // this is when they start the expt\n  //       sectionTime: sectionTime, //this is if they somehow refresh the page...\n  //       trialTime: trialTime,\n  //       taskSession: this.state.taskSession,\n  //\n  //       structNum: null,\n  //\n  //       level: this.state.level,\n  //       trialNum: this.state.trialNum,\n  //       trialTotal: this.state.trialTotal,\n  //       trialSliderRT: this.state.trialSliderRT,\n  //       trialMu: this.state.trialMu,\n  //       trialSgm: this.state.trialSgm,\n  //       trialTime: this.state.trialTime,\n  //       trialScore: this.state.trialScore,\n  //       valElem1: this.state.valElem1,\n  //       valElem2: this.state.valElem2,\n  //       valElem3: this.state.valElem3,\n  //       colElem1: this.state.colElem1,\n  //       colElem2: this.state.colElem2,\n  //       colElem3: this.state.colElem3\n  //\n  //     };\n  //     //\n  //     // console.log(saveString);\n  //\n  //     try {\n  //       fetch(`${DATABASE_URL}/trainingTrial_data/` + userID, {\n  //         method: \"POST\",\n  //         headers: {\n  //           Accept: \"application/json\",\n  //           \"Content-Type\": \"application/json\",\n  //         },\n  //         body: JSON.stringify(saveString),\n  //       });\n  //     } catch (e) {\n  //       console.log(\"Cant post?\");\n  //     }\n  //\n  //     //lag a bit to make sure statestate is saved\n  //     setTimeout(\n  //       function () {\n  //         this.trialNext();\n  //       }.bind(this),\n  //       10\n  //     );\n  //   }\n  //\n  //   trialNext() {\n  //     var trialNum = this.state.trialNum + 1;\n  //     var trialTime = Math.round(performance.now());\n  //\n  //     this.setState({\n  //       trialTime: trialTime,\n  //       trialNum: trialNum,\n  //       trialSliderRT: null,\n  //       trialMu: null,\n  //       trialSgm: null,\n  //       trialTime: null,\n  //       trialScore: null,\n  //       valElem1: null,\n  //       valElem2: null,\n  //       valElem3: null,\n  //       colElem1: null,\n  //       colElem2: null,\n  //       colElem3: null\n  //     });\n  //   }\n  //\n  // componentWillUnmount() {\n  //   // fix Warning: Can't perform a React state update on an unmounted component\n  //   this.setState = (state, callback) => {\n  //     return;\n  //   };\n  // }\n\n\n}\n\nsetTimeout(function () {\n  this.setState({\n    trialTime0: trialTime0,\n    trialSgmMu: trialSgmMu,\n    trialRT: trialRT\n  });\n}.bind(this), 1000);\nexport default _c = withRouter(TrainingTask);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js"],"names":["React","useState","withRouter","DATABASE_URL","styles","Slider","Cockpit","trialTotal","TrainingTask","Component","constructor","props","trialSgmMu","Array","fill","map","trialRT","state","trialNum","trialTime0","saveSgmMu","result","sgm","mu","Math","round","performance","now","setTimeout","render","text","questions","cockpit","setState","bind"],"mappings":"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","sourcesContent":["import React, { useState }  from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport Cockpit from \"./img/CockpitBlank.jpg\";\n// import ElementsTraining  from \"./elementsTraining\";\n/////////////////////////////////////////////////////////////////////////////////\n\nvar trialTotal = 9;\n//\n// setTimeout(\n//   function () {\n//     this.trialSave();\n//   }.bind(this),\n//   0\n// );\n//\n//\n// setTimeout(\n//   function () {\n//     this.setState({\n//       mounted: 1,\n//     });\n//   }.bind(this),\n//   5000\n// );\n/////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n// REACT COMPONENT START\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // const userID = this.props.location.state.userID;\n    // const date = this.props.location.state.date;\n    // const startTime = this.props.location.state.startTime;\n    // var currentDate = new Date(); // maybe change to local\n    // var timeString = currentDate.toTimeString();\n    var trialSgmMu = Array(trialTotal).fill().map(() => Array(3).fill(0));\n    var trialRT = Array(trialTotal).fill().map(() => Array(3).fill(0));\n    /////////////////////////////////////////////////////////////////////////////////\n    // SET COMPONENT STATES\n    this.state = {\n      // userID: userID,\n      // date: date,\n      // startTime: startTime,\n      // sectionTime: timeString,\n      // taskSessionTry: 1,\n      // taskSession: \"TrainingTask\",\n      // level: 1,//adapt later\n      trialNum: 1,//adapt\n      trialRT: trialRT,\n      trialTime0: 0,\n      // trialTotal: 1,//adapt\n      // //\n      // trialSliderRT: null,\n      trialSgmMu: trialSgmMu,\n      // trialTime: null,\n      // trialScore: null,\n      // valElem1: null,\n      // valElem2: null,\n      // valElem3: null,\n      // colElem1: null,\n      // colElem2: null,\n      // colElem3: null,\n      // taskPart: 2\n    };\n    // this.switchImage = this.switchImage.bind(this);\n  }\n\n  // switchTaskpart() {\n  //   this.setState({\n  //     taskPart: 2\n  //   });\n  // }\n    //\n    // componentDidMount() {\n    //   setTimeout(this.switchTaskpart, 1000);\n    // }\n     saveSgmMu(result) {\n       debugger;\n       trialSgmMu[trialNum-1][0]= trialNum;\n       trialSgmMu[trialNum-1][1] = result.sgm;\n       trialSgmMu[trialNum-1][2] = result.mu;\n       trialRT[trialNum-1][0] = trialNum;\n       trialRT[trialNum-1][1] = Math.round(performance.now())- trialTime0;\n       setTimeout()\n\n    }\n\n    // setTrialVar() {\n    //\n    // }\n\n\n\n\n    render() {\n      var trialNum = this.state.trialNum+1;\n      var trialTime0 = Math.round(performance.now());\n      var trialSgmMu = this.state.trialSgmMu;\n      var trialRT = this.state.trialRT;\n\n      // if (this.state.taskPart===1){\n\n        // return (<div className={styles.cockpit}>\n        //   //   <div>{text}</div>\n        //   <ElementsTraining onSpacebarHit={(result) => window.alert(JSON.stringify(result))} />\n        //   </div>);\n        //\n        // } else {\n          let text = (\n            <div className={styles.questions}>\n            How large is the alien population?\n            <br />\n            <br />\n            <br />\n            </div>\n\n          );\n\n          return (<div className={styles.cockpit}>\n            <div>{text}</div>\n            <Slider onSpacebarHit={(result) => this.saveSgmMu(result)} />\n            </div>);\n        // }// window.alert(JSON.stringify(result))} />\n      }\n\n      // renderElements(val, col){\n      //   return <ElementsTraining value={val} col={col} training_apple_col={this.props.training_apple_col}/>;\n      // }\n\n\n///\n    //   trialSave() {\n    //     var userID = this.state.userID;\n    //     var currentDate = new Date(); // maybe change to local\n    //     var sectionTime = currentDate.toTimeString();\n    //     var trialTime = Math.round(performance.now());\n    //\n    //     let saveString = {\n    //       userID: this.state.userID,\n    //       date: this.state.date,\n    //       startTime: this.state.startTime, // this is when they start the expt\n    //       sectionTime: sectionTime, //this is if they somehow refresh the page...\n    //       trialTime: trialTime,\n    //       taskSession: this.state.taskSession,\n    //\n    //       structNum: null,\n    //\n    //       level: this.state.level,\n    //       trialNum: this.state.trialNum,\n    //       trialTotal: this.state.trialTotal,\n    //       trialSliderRT: this.state.trialSliderRT,\n    //       trialMu: this.state.trialMu,\n    //       trialSgm: this.state.trialSgm,\n    //       trialTime: this.state.trialTime,\n    //       trialScore: this.state.trialScore,\n    //       valElem1: this.state.valElem1,\n    //       valElem2: this.state.valElem2,\n    //       valElem3: this.state.valElem3,\n    //       colElem1: this.state.colElem1,\n    //       colElem2: this.state.colElem2,\n    //       colElem3: this.state.colElem3\n    //\n    //     };\n    //     //\n    //     // console.log(saveString);\n    //\n    //     try {\n    //       fetch(`${DATABASE_URL}/trainingTrial_data/` + userID, {\n    //         method: \"POST\",\n    //         headers: {\n    //           Accept: \"application/json\",\n    //           \"Content-Type\": \"application/json\",\n    //         },\n    //         body: JSON.stringify(saveString),\n    //       });\n    //     } catch (e) {\n    //       console.log(\"Cant post?\");\n    //     }\n    //\n    //     //lag a bit to make sure statestate is saved\n    //     setTimeout(\n    //       function () {\n    //         this.trialNext();\n    //       }.bind(this),\n    //       10\n    //     );\n    //   }\n    //\n    //   trialNext() {\n    //     var trialNum = this.state.trialNum + 1;\n    //     var trialTime = Math.round(performance.now());\n    //\n    //     this.setState({\n    //       trialTime: trialTime,\n    //       trialNum: trialNum,\n    //       trialSliderRT: null,\n    //       trialMu: null,\n    //       trialSgm: null,\n    //       trialTime: null,\n    //       trialScore: null,\n    //       valElem1: null,\n    //       valElem2: null,\n    //       valElem3: null,\n    //       colElem1: null,\n    //       colElem2: null,\n    //       colElem3: null\n    //     });\n    //   }\n    //\n    // componentWillUnmount() {\n    //   // fix Warning: Can't perform a React state update on an unmounted component\n    //   this.setState = (state, callback) => {\n    //     return;\n    //   };\n    // }\n  }\n\n  setTimeout(\n    function() {\n      this.setState({\n        trialTime0: trialTime0,\n        trialSgmMu: trialSgmMu,\n        trialRT: trialRT,\n      });\n    }\n    .bind(this),\n    1000\n  );\n\n\n\n  export default withRouter(TrainingTask);\n"]},"metadata":{},"sourceType":"module"}