{"ast":null,"code":"var _jsxFileName = \"/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/sliderOutcomeCheck2.js\";\nimport { range } from \"lodash\";\nimport normalPdf from \"normal-pdf\";\nimport { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OutcomeSliderCheckSecond = props => {\n  const trueValue = props.value;\n  const xValues = range(0, 100, 0.5);\n  const yValues = xValues.map(x => normalPdf(x, props.mu, props.sgm));\n  const yValuesAdaptNew = yValues.map(function (element) {\n    return element * 1000;\n  });\n  const xValuesOutcome = new Array(200).fill(null);\n  xValuesOutcome[trueValue * 2] = yValuesAdaptNew[trueValue * 2];\n  const data = {\n    series: [{\n      data: yValuesAdaptNew,\n      type: \"line\"\n    }, {\n      data: xValuesOutcome,\n      type: \"column\"\n    }],\n    options: {\n      chart: {\n        toolbar: {\n          show: false\n        },\n        height: 350,\n        type: 'line',\n        zoom: {\n          enabled: false\n        }\n      },\n      colors: [\"#DAA520\"],\n      fill: {\n        colors: [\"#DAA520\"]\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      markers: {\n        size: 0\n      },\n      yaxis: {\n        min: 0,\n        labels: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        lines: {\n          show: false\n        }\n      },\n      xaxis: {\n        color: '#d2eaf2',\n        show: false,\n        // min: 0,\n        // max: 100,\n        tickAmount: 5,\n        overwriteCategories: ['0', '25', '50', '75', '100'],\n        lines: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        axisBorder: {\n          show: false,\n          color: '#e7e6e2',\n          height: 4,\n          width: '100%'\n        }\n      }\n    },\n    grid: {\n      show: false\n    },\n    tooltip: {\n      enabled: false,\n      show: false\n    }\n  }; //\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: data.options,\n      series: data.series,\n      height: 375,\n      width: 700,\n      align: \"center\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_c = OutcomeSliderCheckSecond;\nexport default OutcomeSliderCheckSecond;\n\nvar _c;\n\n$RefreshReg$(_c, \"OutcomeSliderCheckSecond\");","map":{"version":3,"sources":["/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/sliderOutcomeCheck2.js"],"names":["range","normalPdf","useEffect","useState","ReactApexChart","OutcomeSliderCheckSecond","props","trueValue","value","xValues","yValues","map","x","mu","sgm","yValuesAdaptNew","element","xValuesOutcome","Array","fill","data","series","type","options","chart","toolbar","show","height","zoom","enabled","colors","dataLabels","stroke","curve","markers","size","yaxis","min","labels","axisTicks","lines","xaxis","color","tickAmount","overwriteCategories","axisBorder","width","grid","tooltip"],"mappings":"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","sourcesContent":["import { range } from \"lodash\";\nimport normalPdf from \"normal-pdf\";\nimport { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\n\nconst OutcomeSliderCheckSecond = (props) => {\n\n  const trueValue = props.value;\n  const xValues = range(0, 100,0.5)\n  const yValues = xValues.map((x) => normalPdf(x, props.mu, props.sgm))\n  const yValuesAdaptNew = yValues.map(function(element) {\n\t                     return element*1000;});\n  const xValuesOutcome = new Array(200).fill(null);\n  xValuesOutcome[trueValue*2] = yValuesAdaptNew[trueValue*2];\n\n\n  const data = {\n    series: [\n      { data: yValuesAdaptNew,\n      type: \"line\"},\n      { data: xValuesOutcome,\n      type: \"column\"},\n\n    ],\n    options: {\n      chart: {\n      toolbar: {\n        show: false},\n        height: 350,\n        type: 'line',\n        zoom: {\n            enabled: false}\n      },\n      colors: [\"#DAA520\"],\n      fill: {colors: [\"#DAA520\"]},\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        curve: 'smooth',\n      },\n      markers: {\n        size: 0\n      },\n      yaxis: {\n        min:0,\n        labels:{show: false },\n        axisTicks:{\n          show: false\n        },\n        lines: {\n          show: false\n        }\n      },\n      xaxis: {\n        color:'#d2eaf2',\n        show: false,\n        // min: 0,\n        // max: 100,\n        tickAmount: 5,\n        overwriteCategories: ['0', '25', '50', '75', '100'],\n        lines: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        axisBorder: {\n          show: false,\n          color: '#e7e6e2',\n          height: 4,\n        width: '100%'},\n\n        }\n      },\n      grid: {show: false},\n      tooltip: {enabled: false,\n      show: false}\n    \n  };\n//\n\n  return (\n    <div>\n    <ReactApexChart options={data.options} series={data.series}  height={375} width={700} align=\"center\"/>\n    </div>\n  )\n};\n\nexport default OutcomeSliderCheckSecond;\n"]},"metadata":{},"sourceType":"module"}