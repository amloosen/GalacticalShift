{"ast":null,"code":"var _jsxFileName = \"/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/barOutcome.js\";\nimport { range } from \"lodash\";\nimport React, { Component } from \"react\";\nimport normalPdf from \"normal-pdf\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BarOutcome extends React.Component {\n  constructor(props) {\n    super(props);\n    const mu = this.props.mu;\n    const sgm = this.props.sgm; // const mu = 50;\n    // const sgm = 20;\n    // const trueValue = 50;\n\n    const trueValue = this.props.value;\n    const xValues = range(0, 100, 0.5);\n    const yValues = xValues.map(x => normalPdf(x, mu, sgm));\n    const yValuesAdaptNew = yValues.map(function (element) {\n      return element * 1000;\n    });\n    var xValuesOutcome = new Array(200).fill(null);\n    xValuesOutcome[trueValue * 2] = yValuesAdaptNew[trueValue * 2];\n    this.state = {\n      series: [{\n        data: trueValue\n      }],\n      options: {\n        chart: {\n          type: 'bar',\n          height: xValuesOutcome\n        },\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: '55%',\n            endingShape: 'rounded'\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: ['transparent']\n        },\n        xaxis: {\n          color: '#d2eaf2',\n          // min: 0,\n          // max: 100,\n          tickAmount: 5,\n          overwriteCategories: ['0', '25', '50', '75', '100'],\n          lines: {\n            show: false\n          },\n          axisTicks: {\n            color: '#e7e6e2',\n            width: 3,\n            height: 10\n          },\n          axisBorder: {\n            show: true,\n            color: '#e7e6e2',\n            height: 4,\n            width: '100%'\n          },\n          labels: {\n            rotate: 0,\n            style: {\n              fontSize: '20px',\n              colors: ['#e7e6e2', '#e7e6e2', '#e7e6e2', '#e7e6e2', '#e7e6e2'],\n              offsetX: 0,\n              offsetY: 0\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          labels: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          lines: {\n            show: false\n          }\n        },\n        fill: {\n          opacity: 1\n        },\n        tooltip: {\n          y: {\n            formatter: function (val) {\n              return \"$ \" + val + \" thousands\";\n            }\n          }\n        }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chart\",\n      children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        options: this.state.options,\n        series: this.state.series,\n        type: \"bar\",\n        height: 350\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default BarOutcome;","map":{"version":3,"sources":["/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/barOutcome.js"],"names":["range","React","Component","normalPdf","ReactApexChart","BarOutcome","constructor","props","mu","sgm","trueValue","value","xValues","yValues","map","x","yValuesAdaptNew","element","xValuesOutcome","Array","fill","state","series","data","options","chart","type","height","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","stroke","show","width","colors","xaxis","color","tickAmount","overwriteCategories","lines","axisTicks","axisBorder","labels","rotate","style","fontSize","offsetX","offsetY","yaxis","min","opacity","tooltip","y","formatter","val","render"],"mappings":"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","sourcesContent":["import { range } from \"lodash\";\nimport React, { Component } from \"react\";\nimport normalPdf from \"normal-pdf\";\nimport ReactApexChart from \"react-apexcharts\";\n\nclass BarOutcome extends React.Component {\n  constructor(props) {\n    super(props);\n    const mu  = this.props.mu\n    const sgm  = this.props.sgm\n    // const mu = 50;\n    // const sgm = 20;\n    // const trueValue = 50;\n    const trueValue = this.props.value;\n\n    const xValues = range(0, 100,0.5);\n    const yValues = xValues.map((x) => normalPdf(x, mu, sgm))\n    const yValuesAdaptNew = yValues.map(function(element) {\n      return element*1000;});\n\n      var xValuesOutcome = new Array(200).fill(null);\n      xValuesOutcome[trueValue*2] = yValuesAdaptNew[trueValue*2];\n\n\n      this.state = {\n\n        series: [{\n          data: trueValue\n        }],\n        options: {\n          chart: {\n            type: 'bar',\n            height:  xValuesOutcome\n          },\n          plotOptions: {\n            bar: {\n              horizontal: false,\n              columnWidth: '55%',\n              endingShape: 'rounded'\n            },\n          },\n          dataLabels: {\n            enabled: false\n          },\n          stroke: {\n            show: true,\n            width: 2,\n            colors: ['transparent']\n          },\n          xaxis: {\n            color:'#d2eaf2',\n            // min: 0,\n            // max: 100,\n            tickAmount: 5,\n            overwriteCategories: ['0', '25', '50', '75', '100'],\n            lines: {\n              show: false\n            },\n            axisTicks: {\n              color: '#e7e6e2',\n              width: 3,\n              height: 10\n            },\n            axisBorder: {\n              show: true,\n              color: '#e7e6e2',\n              height: 4,\n            width: '100%'},\n            labels: {\n              rotate: 0,\n              style: {\n                fontSize: '20px',\n                colors: ['#e7e6e2','#e7e6e2','#e7e6e2','#e7e6e2','#e7e6e2'],\n                offsetX: 0,\n             offsetY: 0}\n            }\n          },\n          yaxis: {\n            min:0,\n            labels:{show: false },\n            axisTicks:{\n              show: false\n            },\n            lines: {\n              show: false\n            }\n          },\n          fill: {\n            opacity: 1\n          },\n          tooltip: {\n            y: {\n              formatter: function (val) {\n                return \"$ \" + val + \" thousands\"\n              }\n            }\n          }\n        },\n\n\n      };\n    }\n\n    render() {\n      return (\n        <div id=\"chart\">\n        <ReactApexChart options={this.state.options} series={this.state.series} type=\"bar\" height={350} />\n        </div>\n      );\n    }\n  }\n\nexport default BarOutcome;\n"]},"metadata":{},"sourceType":"module"}