{"ast":null,"code":"var _jsxFileName = \"/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js\";\nimport React, { useState, Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport OutcomeSlider from \"./sliderOutcome\";\nimport ElementsFullDisplay from \"./elementsFulldisplay\";\nimport Cockpit from \"./img/CockpitBlank.jpg\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\"; /////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n    let trialTotal = 9; //update later\n\n    let trialSgmMu = Array(trialTotal).fill().map(() => Array(3).fill(0));\n    let trialRT = Array(trialTotal).fill().map(() => Array(3).fill(0));\n    this.state = {\n      // userID: userID,\n      // date: date,\n      // startTime: startTime,\n      // sectionTime: timeString,\n      // taskSessionTry: 1,\n      // taskSession: \"TrainingTask\",\n      trialNum: 1,\n      //adapt\n      trialRT: trialRT,\n      choiceTime0: 0,\n      trialTotal: trialTotal,\n      //adapt\n      // //\n      // trialSliderRT: null,\n      trialSgmMu: trialSgmMu,\n      timerCountDur: 10,\n      timePassed: false,\n      feedback: false // trialTime: null,\n      // trialScore: null,\n      // valElem1: null,\n      // valElem2: null,\n      // valElem3: null,\n      // colElem1: null,\n      // colElem2: null,\n      // colElem3: null\n\n    };\n  } // render() {\n  //   return (<div>\n  //           <div>{this.renderElements()}</div>\n  //           // <div>{this.renderSlider()}</div>\n  //           </div>);\n  // }\n\n\n  render() {\n    setTimeout(() => {\n      this.setState({\n        timePassed: true\n      });\n    }, 10000);\n\n    if (!this.state.timePassed) {\n      return /*#__PURE__*/_jsxDEV(ElementsFullDisplay, {\n        value1: 30,\n        value2: 40,\n        value3: 80,\n        trialTotal: this.state.trialTotal,\n        trialNum: this.state.trialNum\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 8\n      }, this);\n    } else if (this.state.feedback === false) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.renderSlider()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this);\n    } else {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        children: this.showFeedback()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this);\n    }\n  } // implement method to change values on elements etc.\n\n\n  renderSlider() {\n    let choiceTime0 = Math.round(performance.now());\n\n    let text = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questions,\n      children: [\"How large is the alien population?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cockpit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        onSpacebarHit: result => this.saveSgmMu(result, choiceTime0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this);\n  }\n\n  saveSgmMu(result, time) {\n    let trialSgmMu = this.state.trialSgmMu;\n    let trialRT = this.state.trialRT;\n    let trialNum = this.state.trialNum;\n    trialSgmMu[trialNum - 1][1] = result.sgm;\n    trialSgmMu[trialNum - 1][2] = result.mu;\n    trialRT[trialNum - 1][0] = trialNum;\n    trialRT[trialNum - 1][1] = time;\n    trialRT[trialNum - 1][2] = Math.round(performance.now());\n    trialRT[trialNum - 1][3] = trialRT[trialNum - 1][2] - time;\n    this.setState({\n      trialSgmMu: trialSgmMu,\n      trialRT: trialRT,\n      feedback: true // trialNum : trialNum+1,\n      // outcome: show\n\n    });\n    debugger;\n  }\n\n  showFeedback(result) {\n    var trueValue = 50;\n    let feedbackTime = Math.round(performance.now());\n\n    let text = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.questions,\n      children: [\"The true population on the planet was $\", trueValue, \" mio.'\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 6\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.cockpit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(OutcomeSlider, {\n        mu: this.state.trialSgmMu[this.state.trialNum - 1][2],\n        sgm: this.state.trialSgmMu[this.state.trialNum - 1][1],\n        value: trueValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(TrainingTask);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/alisaloosen/Documents/GitHub/GalacticalShift/src/Components/TrainingTask.js"],"names":["React","useState","Component","withRouter","DATABASE_URL","styles","Slider","OutcomeSlider","ElementsFullDisplay","Cockpit","CountdownCircleTimer","TrainingTask","constructor","props","trialTotal","trialSgmMu","Array","fill","map","trialRT","state","trialNum","choiceTime0","timerCountDur","timePassed","feedback","render","setTimeout","setState","renderSlider","showFeedback","Math","round","performance","now","text","questions","cockpit","result","saveSgmMu","time","sgm","mu","trueValue","feedbackTime"],"mappings":"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","sourcesContent":["import React, { useState, Component}  from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { DATABASE_URL } from \"./config\";\nimport styles from \"./style/taskStyle.module.css\";\nimport Slider from \"./slider\";\nimport OutcomeSlider from \"./sliderOutcome\";\nimport ElementsFullDisplay from \"./elementsFulldisplay\";\nimport Cockpit from \"./img/CockpitBlank.jpg\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\n/////////////////////////////////////////////////////////////////////////////////\n\n/////////////////////////////////////////////////////////////////////////////////\nclass TrainingTask extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let trialTotal = 9;//update later\n\n    let trialSgmMu = Array(trialTotal).fill().map(() => Array(3).fill(0));\n    let trialRT = Array(trialTotal).fill().map(() => Array(3).fill(0));\n\n    this.state = {\n      // userID: userID,\n      // date: date,\n      // startTime: startTime,\n      // sectionTime: timeString,\n      // taskSessionTry: 1,\n      // taskSession: \"TrainingTask\",\n      trialNum: 1,//adapt\n      trialRT: trialRT,\n      choiceTime0: 0,\n      trialTotal: trialTotal,//adapt\n      // //\n      // trialSliderRT: null,\n      trialSgmMu: trialSgmMu,\n      timerCountDur: 10,\n      timePassed: false,\n      feedback: false,\n      // trialTime: null,\n      // trialScore: null,\n      // valElem1: null,\n      // valElem2: null,\n      // valElem3: null,\n      // colElem1: null,\n      // colElem2: null,\n      // colElem3: null\n    };\n  }\n\n  // render() {\n  //   return (<div>\n  //           <div>{this.renderElements()}</div>\n  //           // <div>{this.renderSlider()}</div>\n  //           </div>);\n  // }\n  render() {\n   setTimeout(() => {this.setState({timePassed: true})}, 10000);\n   if (!this.state.timePassed){\n     return (\n       <ElementsFullDisplay  value1={30} value2={40} value3={80} trialTotal={this.state.trialTotal} trialNum={this.state.trialNum}/>\n     );\n   }else if (this.state.feedback===false){\n    return (\n    <div>{this.renderSlider()}</div>\n  );}\n  else {\n      <div>{this.showFeedback()}</div>\n  }\n }\n\n\n\n  // implement method to change values on elements etc.\n  renderSlider(){\n     let choiceTime0 = Math.round(performance.now());\n\n     let text = (\n      <div className={styles.questions}>\n      How large is the alien population?\n      <br />\n      <br />\n      <br />\n      </div>);\n\n      return (\n        <div className={styles.cockpit}>\n        <div>{text}</div>\n        <Slider onSpacebarHit={(result) => this.saveSgmMu(result,choiceTime0)} />\n        </div>\n      );\n    }\n\n    saveSgmMu(result,time) {\n      let trialSgmMu = this.state.trialSgmMu;\n      let trialRT = this.state.trialRT;\n      let trialNum = this.state.trialNum;\n      trialSgmMu[trialNum-1][1] = result.sgm;\n      trialSgmMu[trialNum-1][2] = result.mu;\n      trialRT[trialNum-1][0] = trialNum;\n      trialRT[trialNum-1][1] = time;\n      trialRT[trialNum-1][2] = Math.round(performance.now());\n      trialRT[trialNum-1][3] = trialRT[trialNum-1][2] - time;\n\n      this.setState({\n          trialSgmMu: trialSgmMu,\n          trialRT: trialRT,\n          feedback: true\n          // trialNum : trialNum+1,\n          // outcome: show\n        });\n        debugger;\n    }\n\n    showFeedback(result){\n    var trueValue = 50;\n    let feedbackTime = Math.round(performance.now());\n\n    let text = (\n     <div className={styles.questions}>\n     The true population on the planet was ${trueValue} mio.'\n     <br />\n     <br />\n     <br />\n     </div>);\n\n     return (\n       <div className={styles.cockpit}>\n       <div>{text}</div>\n       <OutcomeSlider mu={this.state.trialSgmMu[this.state.trialNum-1][2]} sgm={this.state.trialSgmMu[this.state.trialNum-1][1]} value={trueValue}/>\n       </div>\n     );}\n\n}\n\n  export default withRouter(TrainingTask);\n"]},"metadata":{},"sourceType":"module"}